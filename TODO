TODO for chicken							-*- Outline -*-
================


* bugs

** csc: no backtrace if chicken fails

** compiler
*** pre-optimization 
**** changes call-sites and makes them invalid for later pre-optimization
*** check profiling (-profile vs. profile-declaration)
**** this doesn't always seem to work, in particular with library units
**** ##sys#finish-profile should always be invoked
     is it in `exit'?
*** when re-defining intrinsics, the compiler should warn and disable re-writes
    add declaration to keep re-writes enabled for core library files
*** -prologue, -epilogue, -prelude, -postlude should check for argument being directory 
    (reported by Eduardo Cavazos)

** expander
*** expansion of r5rs_pitfall 4.2 incorrect
    possibly due to a non-aliased implicit "begin" somewhere
*** dirty-macros.scm loops when using `defile'
    possibly due to unrenamed special forms
*** extended lambda-lists refer to `optional' and `let-optionals[*]'
    this will break, when these macros are renamed on import or not imported
    at all
**** a possible solution is to use internal forms, provided by the "scheme" module.
*** need way to force generating module-registration code for standalone executables.

** modules
*** mark import-source (module) on plist of imported symbols and use in re-import warning
    doesn't work that easily, try to find another solution
*** DSSSL lambda-lists need imports of `chicken' module ("optional", "let-optionals", ...)
**** should probably use internal aliases

** libraries
*** library/runtime: cyclic list checks for assq/assv/assoc/memq/memv/member
    and C_i_list_tail
*** finalizers on lexically ref'd data not working in interpreter
    reported by Jim Ursetto
    reverted original patch, see patches/finalizer-closures.diff

** tools
*** chicken-bug: SMTP servers not accessible (greylisting)


* tasks

** remove TODO from master

** pending commits

commit 6e5eb38f11a2a8f9a82d1009563e371139a76438
Author: Felix <bunny351@gmail.com>
Date:   Sun Oct 11 00:45:40 2009 +0200

    removed apply-, unbound-value- and invalid procedure call hooks.
    These are just complicated hacks with very little value.

commit 3a8da718bf4c6b71ced0fb60bee2bd84a2f2321d
Author: Felix <bunny351@gmail.com>
Date:   Wed Oct 14 14:59:13 2009 +0200

    Added optional argument to grep function in regex unit [suggested by Tony Sidaway]

** private commits not in pending

commit ab284ea5881e8a6698f1bfff8e3d0d3ce57ee425
Author: unknown <felix@.(none)>
Date:   Thu Oct 22 09:40:10 2009 +0200

    upgrade message in setup-api shows version (thanks to ckeen)

commit d611cdb4ff734bfaaadfadc57985eee6cf410dd1
Author: unknown <felix@.(none)>
Date:   Wed Oct 21 16:06:31 2009 +0200

    standard-extension has optional static compile flag

commit 8a988e1fff944a080402b60b1b3f6d983c236a02
Author: unknown <felix@.(none)>
Date:   Tue Oct 20 21:56:59 2009 +0200

    removed breakpoint from import file

commit 94f9b927fa3d7b1a6083cb07a8d7c60aa387b4ae
commit c4b8bde930d383d5572975e6f5cce025d9fb759d
Author: unknown <felix@.(none)>
Date:   Tue Oct 20 13:23:55 2009 +0200

    install so, not scm, silly

commit 18b042d591d28ed57115ec783b6b51e66ce62a19
Author: unknown <felix@.(none)>
Date:   Tue Oct 20 13:20:10 2009 +0200

    standard-extension didn't install import library

commit c5fac3c98d7c187e0564d062c3f77623f3882741
Author: unknown <felix@.(none)>
Date:   Tue Oct 20 12:21:53 2009 +0200

    cleanups in some text-files

commit 89a110080526e0160f3240281d3bd98eb0aff0ba
Author: unknown <felix@.(none)>
Date:   Tue Oct 20 12:18:53 2009 +0200

    removed some obsolete scripts and files

commit 81dcc1cfe055eb150c6643447c3ed0f12c118836
Author: unknown <felix@.(none)>
Date:   Tue Oct 20 11:51:45 2009 +0200

    process-execute on windows didn't handle case of missing arglist argument

commit bce0d16a76588f8918ace633313edd62ffe575e6
Author: unknown <felix@.(none)>
Date:   Mon Oct 19 14:21:51 2009 +0200

    possible fix for reexport bug; no timing output for benchmarks in test suite

commit 1402eea7aec2611dfe48542715b1492561072f41
Author: unknown <felix@.(none)>
Date:   Mon Oct 19 12:12:46 2009 +0200

    henrietta shows version in comment marker; removed unused ##sys#syntactic-environment?

commit 7aacba829e680a9c20fdac4800d3445f624bf6c5
Author: Felix <bunny351@gmail.com>
Date:   Mon Oct 19 00:42:55 2009 +0200

    removed breakpoint support from scheduler

commit 6987792e2c27ee6c9f6ff655ec94cff052528438
Author: Felix <bunny351@gmail.com>
Date:   Sun Oct 11 11:54:28 2009 +0200

    removed uses of NOAPPLYHOOK

commit c1154565abc041202110aae8e93a57cbe3fba3c2
Author: Felix <bunny351@gmail.com>
Date:   Sun Oct 11 11:37:44 2009 +0200

    removed trace operations from manual

commit c41657eedc99190a644df6581a8bf9944452a97a
Author: Felix <bunny351@gmail.com>
Date:   Sun Oct 11 11:37:06 2009 +0200

    remove tracing facilities from csi - this can be done better using the advice egg

** SHA-1 commit-ID in banner

** branches
*** unfucked-dload can be removed

** module issues
*** need a way to omit generating module registration without generating import lib
    for example when compiling static version, where implib already exists
*** code-duplication in compiler and evaluator for ##core#module
*** "scheme" module does not include some special forms ("define-syntax", etc.)
*** import-for-syntax imports value bindings into import-env
    should actually be a distinct meta-import-env.
    example: we need `(import-for-syntax chicken)' to have access to
    `receive' in a procedural syntax definition.
*** curried define performs expansion in empty se - problem?
    (as comment in expand.scm indicated (##sys#register-export))
*** check phase separation and module access
**** see "expander" above
*** consider adding support for unnamed modules

** compiler
*** (csc) generate object-files in /tmp (or TMPDIR)?

** setup/install
*** setup-download
**** use "HTTP_PROXY"/"http_proxy" env. var
**** handle redirects in http-fetch

** library units
*** read-mark list should be stored in read-table
*** Weak locatives can probably be used to implement weak hash-tables (at least for some data)

** syntax-error
*** if ##sys#current-module is set, add name to error message?
*** fluidly keep track of expanded forms (extend meaning of culprit) to pprint pruned expr on error

** build
*** need script to process import libraries for generating indices for doc.callcc.org
    then tell Toby Butzon about it
*** using "touch" with WINDOWS_SHELL won't work (need alternative) (mingw/non-msys build)
*** extend scripts/guess-platforms.sh for more platforms

** scrutiny
*** add support for keyword arguments and check even length and available keywords

** runtime
*** try to build with TLS


* features

** error-handling hook for argument-type errors that signal a non-number
   the numbers hook could modify this and provide a better error message if a non-core
   number type triggers such an error


* tests

** optional longer run (env. var)
*** syntax-rules-stress-test
*** fully compiled ec-tests
** 3-stage bootstrap with compiler-output comparison


* optimizations

** local mode could be enabled for all core libs
   also could reduce performance, as it does for regex

** global inline files for core units
*** This would remove necessity for many simple re-write rules in c-platform.scm

** delegates for extended llists
*** (define (foo ... #!XXX ...) ...)
    ~>
    (begin
      (declare (hide tmp))
      (define (tmp VAR ...) ...)
      (define (foo ... #!XXX ...) (tmp VAR ...))
      (define-compiler-syntax foo
        (syntax-rules ()
	  ((_ arg ...) (tmp <processed-arg> ...)))))
*** only used after definition
*** only if opt/key defaults don't refer to previous llist vars
*** disable if no compiler-syntax enabled

** self-recursion optimization
*** what MacScheme called "benchmark-mode" (assume self-calls are recursion)
*** needs declaration or option, >= -O2
*** can be implemented like in the extended-llists opt. above

** compiler-support for get-keyword ?
*** what when a function with keyword args gets inlined?
*** when inlining, consing arg-list with "list" may make get-keyword possibly foldable

** lambda-fusion / "fuse-and-dispatch" (suggested by Alex Shinn)
   convert groups of local lambdas referenced to only in operator-position into
   looping lambda + dispatch (static variable can be used), otherwise similar to
   a conditional

** handle optional args primitively 
   for example, set to distinguished val (checking argc) on C level, core
   primitive for checking this - should be quite simple, but llist processing
   (decompose-lambda-list) will be more expensive and cumbersome.

** The benchmarks are meaningless - find real ones.
*** check Feeley's benchmarks (slatex, compiler)
