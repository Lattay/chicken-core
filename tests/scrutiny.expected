;; numbers replaced with XXX by redact-gensyms.scm
;; prefixes: (tmp g scm:)

Warning: (scrutiny-tests.scm:XXX) - assignment to imported value binding `car'

Note: Type mismatch
  In `a', a toplevel procedure
  In `b', a local procedure
  In `c', a local procedure
  In conditional expression

    (if x 1 2)

  Test condition has always true value of type

    number

Note: Type mismatch
  In `b', a toplevel procedure
  In conditional expression

    (if x 1 2)

  Test condition has always true value of type

    true

Warning: Type mismatch (scrutiny-tests.scm:XXX) 
  In `foo', a toplevel procedure
  In conditional expression

    (if x (scheme#values 1 2) (scheme#values 1 2 (scheme#+ (scheme#+ ...))))

  The branches have different number of returned values.

  The true branch returns 2 values

    (scheme#values 1 2)

  The false branch returns 3 values

    (scheme#values 1 2 (scheme#+ (scheme#+ (scheme#+ ...))))

Warning: Type mismatch (scrutiny-tests.scm:XXX) 
  At toplevel
  In procedure call

    (bar 3 'a)

  Argument #2 to procedure `bar' has invalid type

    symbol

  The expected type is

    number

  Procedure `bar' has type

    (#!rest number -> number)

Warning: Type mismatch (scrutiny-tests.scm:XXX) 
  At toplevel
  In procedure call

    (scheme#string?)

  Procedure `string?' is called with 0 arguments but 1 argument is expected.

  Procedure `string?' from module `scheme' has type

    (* -> boolean)

Warning: At toplevel
  (scrutiny-tests.scm:XXX) expected a single result in argument #1 of procedure call `(chicken.base#print (scheme#values 1 2))', but received 2 results

Warning: At toplevel
  (scrutiny-tests.scm:XXX) expected a single result in argument #1 of procedure call `(chicken.base#print (scheme#values))', but received zero results

Warning: Type mismatch (scrutiny-tests.scm:XXX) 
  At toplevel
  In procedure call

    (x)

  Procedure in a procedure call has invalid type

    fixnum

  The expected type is

    (-> *)

Warning: Type mismatch (scrutiny-tests.scm:XXX) 
  At toplevel
  In procedure call

    (scheme#+ 'a 'b)

  Argument #1 to procedure `+' has invalid type

    symbol

  The expected type is

    number

  Procedure `+' from module `scheme' has type

    (#!rest number -> number)

Warning: Type mismatch (scrutiny-tests.scm:XXX) 
  At toplevel
  In procedure call

    (scheme#+ 'a 'b)

  Argument #2 to procedure `+' has invalid type

    symbol

  The expected type is

    number

  Procedure `+' from module `scheme' has type

    (#!rest number -> number)

Warning: Type mismatch
  At toplevel
  In assignment

    (set! scheme#car 33)

  Variable `scheme#car' is assigned invalid value.

  The assigned value has type

    fixnum

  The declared type of `scheme#car' is

    ((pair 'a335 *) -> 'a335)

Warning: At toplevel
  expected a single result in `let' binding of `gXXX', but received 2 results

Warning: Type mismatch
  At toplevel
  In procedure call

    (gXXX)

  Procedure in a procedure call has invalid type

    fixnum

  The expected type is

    (-> *)

Note: Type mismatch
  In `foo', a toplevel procedure
  In conditional expression

    (if bar 3 (##core#undefined))

  Test condition has always true value of type

    (-> *)

Warning: Type mismatch (scrutiny-tests.scm:XXX) 
  In `foo2', a toplevel procedure
  In procedure call

    (scheme#string-append x "abc")

  Argument #1 to procedure `string-append' has invalid type

    number

  The expected type is

    string

  Procedure `string-append' from module `scheme' has type

    (#!rest string -> string)

Warning: Type mismatch (scrutiny-tests.scm:XXX) 
  At toplevel
  In procedure call

    (foo3 99)

  Argument #1 to procedure `foo3' has invalid type

    fixnum

  The expected type is

    string

  Procedure `foo3' has type

    (string -> string)

Warning: Type mismatch (scrutiny-tests.scm:XXX) 
  In `foo4', a toplevel procedure
  In procedure call

    (scheme#+ x 1)

  Argument #1 to procedure `+' has invalid type

    string

  The expected type is

    number

  Procedure `+' from module `scheme' has type

    (#!rest number -> number)

Warning: Type mismatch (scrutiny-tests.scm:XXX) 
  In `foo5', a toplevel procedure
  In procedure call

    (scheme#+ x 3)

  Argument #1 to procedure `+' has invalid type

    string

  The expected type is

    number

  Procedure `+' from module `scheme' has type

    (#!rest number -> number)

Warning: Type mismatch (scrutiny-tests.scm:XXX) 
  In `foo6', a toplevel procedure
  In procedure call

    (scheme#+ x 3)

  Argument #1 to procedure `+' has invalid type

    string

  The expected type is

    number

  Procedure `+' from module `scheme' has type

    (#!rest number -> number)

Warning: Type mismatch (scrutiny-tests.scm:XXX) 
  At toplevel
  In procedure call

    (scheme#+ x 1)

  Argument #1 to procedure `+' has invalid type

    string

  The expected type is

    number

  Procedure `+' from module `scheme' has type

    (#!rest number -> number)

Warning: Type mismatch (scrutiny-tests.scm:XXX) 
  In `foo10', a toplevel procedure
  In procedure call

    (foo9 x)

  Argument #1 to procedure `foo9' has invalid type

    number

  The expected type is

    string

  Procedure `foo9' has type

    (string -> symbol)

Warning: Type mismatch (scrutiny-tests.scm:XXX) 
  In `foo10', a toplevel procedure
  In procedure call

    (scheme#+ x 1)

  Argument #1 to procedure `+' has invalid type

    string

  The expected type is

    number

  Procedure `+' from module `scheme' has type

    (#!rest number -> number)

Warning: Type mismatch (scrutiny-tests.scm:XXX) 
  In `foo10', a toplevel procedure
  In expression

    (scheme#substring x 0 10)

  Expression's declared and actual types do not match.

  The actual type is

    string

  The expression's declared type is

    pair

Warning: Type mismatch (scrutiny-tests.scm:XXX) 
  In `foo10', a toplevel procedure
  In procedure call

    (scheme#string-append (the pair (scheme#substring x 0 10)))

  Argument #1 to procedure `string-append' has invalid type

    pair

  The expected type is

    string

  Procedure `string-append' from module `scheme' has type

    (#!rest string -> string)

Warning: Type mismatch (scrutiny-tests.scm:XXX) 
  In `foo10', a toplevel procedure
  In expression

    (scheme#values 1 2)

  Expression returns too many values.

  The expression returns 2 values but is declared to return

    *

Warning: Type mismatch (scrutiny-tests.scm:XXX) 
  In `foo10', a toplevel procedure
  In expression

    (scheme#values)

  Expression returns 0 values but is declared to return

    *

Warning: Type mismatch (scrutiny-tests.scm:XXX) 
  In `foo10', a toplevel procedure
  In procedure call

    (scheme#* x y)

  Argument #1 to procedure `*' has invalid type

    string

  The expected type is

    number

  Procedure `*' from module `scheme' has type

    (#!rest number -> number)

Warning: Type mismatch (scrutiny-tests.scm:XXX) 
  In `foo#blabla', a toplevel procedure
  In procedure call

    (scheme#+ 1 'x)

  Argument #2 to procedure `+' has invalid type

    symbol

  The expected type is

    number

  Procedure `+' from module `scheme' has type

    (#!rest number -> number)

Warning: Type mismatch
  At toplevel
  In expression

    deprecated-procedure

  Use of deprecated identifier `deprecated-procedure'.

Warning: Type mismatch
  At toplevel
  In expression

    another-deprecated-procedure

  Use of deprecated identifier `another-deprecated-procedure'.

  The suggested alternative is `replacement-procedure'.

Warning: Type mismatch (scrutiny-tests.scm:XXX) 
  At toplevel
  In procedure call

    (apply1 scheme#+ (scheme#list 'a 2 3))

  Argument #2 to procedure `apply1' has invalid type

    (list symbol fixnum fixnum)

  The expected type is

    (list-of number)

  Procedure `apply1' has type

    ((#!rest 'a143 -> 'b144) (list-of 'a143) -> 'b144)

Warning: Type mismatch (scrutiny-tests.scm:XXX) 
  At toplevel
  In procedure call

    (apply1 scheme#+ (scheme#cons 'a (scheme#cons 2 (scheme#cons 3 ...))))

  Argument #2 to procedure `apply1' has invalid type

    (list symbol fixnum fixnum)

  The expected type is

    (list-of number)

  Procedure `apply1' has type

    ((#!rest 'a143 -> 'b144) (list-of 'a143) -> 'b144)

Note: Type mismatch (scrutiny-tests.scm:XXX) 
  At toplevel
  In predicate call

    (chicken.base#fixnum? x)

  Predicate call will always return true.

  Procedure `fixnum?' from module `chicken.base' is a predicate for

    fixnum

  The given argument has type

    fixnum

Note: Type mismatch (scrutiny-tests.scm:XXX) 
  At toplevel
  In predicate call

    (scheme#symbol? x)

  Predicate call will always return false.

  Procedure `symbol?' from module `scheme' is a predicate for

    symbol

  The given argument has type

    (or char string)

Note: Type mismatch (scrutiny-tests.scm:XXX) 
  At toplevel
  In predicate call

    (scheme#string? x)

  Predicate call will always return false.

  Procedure `string?' from module `scheme' is a predicate for

    string

  The given argument has type

    (not (or char string))

Note: Type mismatch (scrutiny-tests.scm:XXX) 
  At toplevel
  In predicate call

    (char-or-string? x)

  Predicate call will always return false.

  Procedure `char-or-string?' is a predicate for

    (or char string)

  The given argument has type

    fixnum

Note: Type mismatch (scrutiny-tests.scm:XXX) 
  At toplevel
  In predicate call

    (scheme#symbol? x)

  Predicate call will always return false.

  Procedure `symbol?' from module `scheme' is a predicate for

    symbol

  The given argument has type

    (or char string)

Note: Type mismatch (scrutiny-tests.scm:XXX) 
  At toplevel
  In predicate call

    (scheme#string? x)

  Predicate call will always return false.

  Procedure `string?' from module `scheme' is a predicate for

    string

  The given argument has type

    fixnum

Note: Type mismatch (scrutiny-tests.scm:XXX) 
  At toplevel
  In predicate call

    (scheme#symbol? x)

  Predicate call will always return false.

  Procedure `symbol?' from module `scheme' is a predicate for

    symbol

  The given argument has type

    char

Note: Type mismatch (scrutiny-tests.scm:XXX) 
  At toplevel
  In predicate call

    (scheme#string? x)

  Predicate call will always return false.

  Procedure `string?' from module `scheme' is a predicate for

    string

  The given argument has type

    symbol

Note: Type mismatch (scrutiny-tests.scm:XXX) 
  At toplevel
  In predicate call

    (scheme#symbol? x)

  Predicate call will always return false.

  Procedure `symbol?' from module `scheme' is a predicate for

    symbol

  The given argument has type

    (or char string)

Note: Type mismatch (scrutiny-tests.scm:XXX) 
  At toplevel
  In predicate call

    (scheme#string? x)

  Predicate call will always return false.

  Procedure `string?' from module `scheme' is a predicate for

    string

  The given argument has type

    symbol

Warning: Type mismatch (scrutiny-tests.scm:XXX) 
  At toplevel
  In procedure call

    (f (scheme#list))

  Argument #1 to procedure `f' has invalid type

    null

  The expected type is

    pair

  Procedure `f' has type

    (pair -> *)

Warning: Type mismatch (scrutiny-tests.scm:XXX) 
  At toplevel
  In procedure call

    (f (scheme#list 1))

  Argument #1 to procedure `f' has invalid type

    (list fixnum)

  The expected type is

    null

  Procedure `f' has type

    (null -> *)

Warning: Type mismatch (scrutiny-tests.scm:XXX) 
  At toplevel
  In procedure call

    (f (scheme#cons 1 2))

  Argument #1 to procedure `f' has invalid type

    (pair fixnum fixnum)

  The expected type is

    list

  Procedure `f' has type

    (list -> *)

Warning: In `vector-ref-warn1', a toplevel procedure
  (scrutiny-tests.scm:XXX) in procedure call to `scheme#vector-ref', index -1 out of range for vector of length 3

Warning: In `vector-ref-warn2', a toplevel procedure
  (scrutiny-tests.scm:XXX) in procedure call to `scheme#vector-ref', index 3 out of range for vector of length 3

Warning: In `vector-ref-warn3', a toplevel procedure
  (scrutiny-tests.scm:XXX) in procedure call to `scheme#vector-ref', index 4 out of range for vector of length 3

Warning: Type mismatch (scrutiny-tests.scm:XXX) 
  In `vector-ref-standard-warn1', a toplevel procedure
  In procedure call

    (scheme#vector-ref v1 'bad)

  Argument #2 to procedure `vector-ref' has invalid type

    symbol

  The expected type is

    fixnum

  Procedure `vector-ref' from module `scheme' has type

    ((vector-of 'a384) fixnum -> 'a384)

Warning: In `vector-set!-warn1', a toplevel procedure
  (scrutiny-tests.scm:XXX) in procedure call to `scheme#vector-set!', index -1 out of range for vector of length 3

Warning: In `vector-set!-warn2', a toplevel procedure
  (scrutiny-tests.scm:XXX) in procedure call to `scheme#vector-set!', index 3 out of range for vector of length 3

Warning: In `vector-set!-warn3', a toplevel procedure
  (scrutiny-tests.scm:XXX) in procedure call to `scheme#vector-set!', index 4 out of range for vector of length 3

Warning: Type mismatch (scrutiny-tests.scm:XXX) 
  In `vector-set!-standard-warn1', a toplevel procedure
  In procedure call

    (scheme#vector-set! v1 'bad 'whatever)

  Argument #2 to procedure `vector-set!' has invalid type

    symbol

  The expected type is

    fixnum

  Procedure `vector-set!' from module `scheme' has type

    (vector fixnum * -> undefined)

Warning: In `list-ref-warn1', a toplevel procedure
  (scrutiny-tests.scm:XXX) in procedure call to `scheme#list-ref', index -1 is negative, which is never valid

Warning: In `list-ref-warn2', a toplevel procedure
  (scrutiny-tests.scm:XXX) in procedure call to `scheme#list-ref', index -1 is negative, which is never valid

Warning: In `list-ref-warn3', a toplevel procedure
  (scrutiny-tests.scm:XXX) in procedure call to `scheme#list-ref', index -1 is negative, which is never valid

Warning: In `list-ref-warn4', a toplevel procedure
  (scrutiny-tests.scm:XXX) in procedure call to `scheme#list-ref', index 3 out of range for proper list of length 3

Warning: In `list-ref-warn5', a toplevel procedure
  (scrutiny-tests.scm:XXX) in procedure call to `scheme#list-ref', index 4 out of range for proper list of length 3

Warning: Type mismatch (scrutiny-tests.scm:XXX) 
  In `list-ref-standard-warn1', a toplevel procedure
  In procedure call

    (scheme#list-ref l1 'bad)

  Argument #2 to procedure `list-ref' has invalid type

    symbol

  The expected type is

    fixnum

  Procedure `list-ref' from module `scheme' has type

    ((list-of 'a366) fixnum -> 'a366)

Warning: Type mismatch (scrutiny-tests.scm:XXX) 
  In `list-ref-standard-warn2', a toplevel procedure
  In procedure call

    (scheme#list-ref l1 'bad)

  Argument #2 to procedure `list-ref' has invalid type

    symbol

  The expected type is

    fixnum

  Procedure `list-ref' from module `scheme' has type

    ((list-of 'a366) fixnum -> 'a366)

Warning: Type mismatch (scrutiny-tests.scm:XXX) 
  In `list-ref-standard-warn3', a toplevel procedure
  In procedure call

    (scheme#list-ref l2 'bad)

  Argument #2 to procedure `list-ref' has invalid type

    symbol

  The expected type is

    fixnum

  Procedure `list-ref' from module `scheme' has type

    ((list-of 'a366) fixnum -> 'a366)

Warning: Type mismatch (scrutiny-tests.scm:XXX) 
  In `list-ref-standard-warn4', a toplevel procedure
  In procedure call

    (scheme#list-ref l2 'bad)

  Argument #2 to procedure `list-ref' has invalid type

    symbol

  The expected type is

    fixnum

  Procedure `list-ref' from module `scheme' has type

    ((list-of 'a366) fixnum -> 'a366)

Warning: Type mismatch (scrutiny-tests.scm:XXX) 
  In `list-ref-type-warn1', a toplevel procedure
  In procedure call

    (chicken.base#add1 (scheme#list-ref l1 1))

  Argument #1 to procedure `add1' has invalid type

    symbol

  The expected type is

    number

  Procedure `add1' from module `chicken.base' has type

    (number -> number)

Warning: Type mismatch (scrutiny-tests.scm:XXX) 
  In `list-ref-type-warn2', a toplevel procedure
  In procedure call

    (chicken.base#add1 (scheme#list-ref l2 1))

  Argument #1 to procedure `add1' has invalid type

    symbol

  The expected type is

    number

  Procedure `add1' from module `chicken.base' has type

    (number -> number)

Warning: Type mismatch (scrutiny-tests.scm:XXX) 
  In `list-ref-type-warn3', a toplevel procedure
  In procedure call

    (chicken.base#add1 (scheme#list-ref l3 1))

  Argument #1 to procedure `add1' has invalid type

    symbol

  The expected type is

    number

  Procedure `add1' from module `chicken.base' has type

    (number -> number)

Warning: Type mismatch (scrutiny-tests.scm:XXX) 
  In `append-result-type-warn1', a toplevel procedure
  In procedure call

    (chicken.base#add1 (scheme#list-ref l1 1))

  Argument #1 to procedure `add1' has invalid type

    symbol

  The expected type is

    number

  Procedure `add1' from module `chicken.base' has type

    (number -> number)

Warning: Type mismatch (scrutiny-tests.scm:XXX) 
  In `append-result-type-warn2', a toplevel procedure
  In procedure call

    (chicken.base#add1 (scheme#list-ref l3 3))

  Argument #1 to procedure `add1' has invalid type

    symbol

  The expected type is

    number

  Procedure `add1' from module `chicken.base' has type

    (number -> number)

Warning: redefinition of standard binding: scheme#car
