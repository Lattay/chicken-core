;; numbers replaced with XXX by redact-gensyms.scm
;; prefixes: (tmp g scm:)

Note: Type mismatch (specialization-tests.scm:XXX) 
  At toplevel
  In predicate call

    (scheme#string? a)

  Predicate call will always return true.

  Procedure `string?', imported from `scheme', is a predicate for

    string

  The given argument has type

    string

Note: Type mismatch (specialization-tests.scm:XXX) 
  At toplevel
  In conditional expression

    (if (scheme#string? a) 'ok 'no)

  Test condition has always true value of type

    true

Note: Type mismatch (specialization-tests.scm:XXX) 
  At toplevel
  In predicate call

    (scheme#string? a)

  Predicate call will always return false.

  Procedure `string?', imported from `scheme', is a predicate for

    string

  The given argument has type

    symbol

Note: Type mismatch (specialization-tests.scm:XXX) 
  At toplevel
  In conditional expression

    (if (scheme#string? a) 'ok 'no)

  Test condition is always false.

Note: Type mismatch (specialization-tests.scm:XXX) 
  At toplevel
  In predicate call

    (scheme#input-port? p)

  Predicate call will always return true.

  Procedure `input-port?', imported from `scheme', is a predicate for

    input-port

  The given argument has type

    input/output-port

Note: Type mismatch (specialization-tests.scm:XXX) 
  At toplevel
  In conditional expression

    (if (scheme#input-port? p) 'ok 'no)

  Test condition has always true value of type

    true

Note: Type mismatch (specialization-tests.scm:XXX) 
  At toplevel
  In predicate call

    (scheme#output-port? p)

  Predicate call will always return true.

  Procedure `output-port?', imported from `scheme', is a predicate for

    output-port

  The given argument has type

    input/output-port

Note: Type mismatch (specialization-tests.scm:XXX) 
  At toplevel
  In conditional expression

    (if (scheme#output-port? p) 'ok 'no)

  Test condition has always true value of type

    true
