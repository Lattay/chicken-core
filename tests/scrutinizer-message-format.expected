;; numbers replaced with XXX by redact-gensyms.scm
;; prefixes: (tmp g scm: a b)

Warning: literal in operator position: (1 2)

Warning: literal in operator position: (1 2)

Warning: Type mismatch (test-scrutinizer-message-format.scm:XXX) 
  In `r-proc-call-argument-count-mismatch', a toplevel procedure
  In procedure call

    (scheme#cons '())

  Procedure `cons' is called with 1 argument but 2 arguments are expected.

  Procedure `cons' from module `scheme' has type

    ('aXXX 'bXXX --> (pair 'aXXX 'bXXX))

Warning: Type mismatch (test-scrutinizer-message-format.scm:XXX) 
  In `r-proc-call-argument-type-mismatch', a toplevel procedure
  In procedure call

    (scheme#length 'symbol)

  Argument #1 to procedure `length' has invalid type

    symbol

  The expected type is

    list

  Procedure `length' from module `scheme' has type

    (list -> fixnum)

Warning: In `r-proc-call-argument-value-count', a toplevel procedure
  (test-scrutinizer-message-format.scm:XXX) expected a single result in argument #1 of procedure call `(scheme#list (chicken.time#cpu-time))', but received 2 results

Warning: In `r-proc-call-argument-value-count', a toplevel procedure
  (test-scrutinizer-message-format.scm:XXX) expected a single result in argument #1 of procedure call `(scheme#vector (scheme#values))', but received zero results

Warning: In `r-proc-call-argument-value-count', a toplevel procedure
  expected a single result in `let' binding of `gXXX', but received zero results

Warning: Type mismatch (test-scrutinizer-message-format.scm:XXX) 
  In `r-cond-branch-value-count-mismatch', a toplevel procedure
  In conditional expression

    (if (the * 1) 1 (scheme#values 1 2))

  The branches have different number of returned values.

  The true branch returns 1 value

    1

  The false branch returns 2 values

    (scheme#values 1 2)

Warning: Type mismatch
  In `r-invalid-called-procedure-type', a toplevel procedure
  In procedure call

    (1 2)

  Procedure in a procedure call has invalid type

    fixnum

  The expected type is

    (* -> *)

Note: Type mismatch (test-scrutinizer-message-format.scm:XXX) 
  In `r-pred-call-always-true', a toplevel procedure
  In predicate call

    (scheme#list? '())

  Predicate call will always return true.

  Procedure `list?' from module `scheme' is a predicate for

    list

  The given argument has type

    null

Note: Type mismatch (test-scrutinizer-message-format.scm:XXX) 
  In `r-pred-call-always-false', a toplevel procedure
  In predicate call

    (scheme#symbol? 1)

  Predicate call will always return false.

  Procedure `symbol?' from module `scheme' is a predicate for

    symbol

  The given argument has type

    fixnum

Note: Type mismatch
  In `r-cond-test-always-true', a toplevel procedure
  In conditional expression

    (if 'symbol 1 (##core#undefined))

  Test condition has always true value of type

    symbol

Note: Type mismatch
  In `r-cond-test-always-false', a toplevel procedure
  In conditional expression

    (if #f 1 (##core#undefined))

  Test condition is always false.

Warning: Type mismatch
  In `r-type-mismatch-in-the', a toplevel procedure
  In expression

    1

  Expression's declared and actual types do not match.

  The actual type is

    fixnum

  The expression's declared type is

    symbol

Warning: Type mismatch (test-scrutinizer-message-format.scm:XXX) 
  In `r-zero-values-for-the', a toplevel procedure
  In expression

    (scheme#values)

  Expression returns 0 values but is declared to return

    symbol

Warning: Type mismatch (test-scrutinizer-message-format.scm:XXX) 
  In `r-too-many-values-for-the', a toplevel procedure
  In expression

    (scheme#values 1 2)

  Expression returns too many values.

  The expression returns 2 values but is declared to return

    symbol

Warning: Type mismatch (test-scrutinizer-message-format.scm:XXX) 
  In `r-too-many-values-for-the', a toplevel procedure
  In expression

    (scheme#values 1 2)

  Expression's declared and actual types do not match.

  The actual type is

    fixnum

  The expression's declared type is

    symbol

Warning: Type mismatch
  In `r-toplevel-var-assignment-type-mismatch', a toplevel procedure
  In assignment

    (set! foo 1)

  Variable `foo' is assigned invalid value.

  The assigned value has type

    fixnum

  The declared type of `foo' is

    boolean

Warning: Type mismatch
  In `r-deprecated-identifier', a toplevel procedure
  In expression

    deprecated-foo

  Use of deprecated identifier `deprecated-foo'.

Warning: Type mismatch
  In `r-deprecated-identifier', a toplevel procedure
  In expression

    deprecated-foo2

  Use of deprecated identifier `deprecated-foo2'.

  The suggested alternative is `foo'.

Warning: Type mismatch
  At toplevel
  In assignment

    (set! foo 1)

  Variable `foo' is assigned invalid value.

  The assigned value has type

    fixnum

  The declared type of `foo' is

    boolean

Warning: In `list-ref-negative-index', a toplevel procedure
  (test-scrutinizer-message-format.scm:XXX) in procedure call to `scheme#list-ref', index -1 is negative, which is never valid

Warning: In `list-ref-out-of-range', a toplevel procedure
  (test-scrutinizer-message-format.scm:XXX) in procedure call to `scheme#list-ref', index 1 out of range for proper list of length 0

Warning: In `vector-ref-out-of-range', a toplevel procedure
  (test-scrutinizer-message-format.scm:XXX) in procedure call to `scheme#vector-ref', index -1 out of range for vector of length 0

Warning: In `zero-values-for-let', a toplevel procedure
  expected a single result in `let' binding of `a', but received zero results

Warning: In `multiple-values-for-let', a toplevel procedure
  expected a single result in `let' binding of `a', but received 2 results

Warning: In `zero-values-for-conditional', a toplevel procedure
  expected a single result in conditional, but received zero results

Warning: In `multiple-values-for-conditional', a toplevel procedure
  expected a single result in conditional, but received 2 results

Note: Type mismatch (test-scrutinizer-message-format.scm:XXX) 
  In `multiple-values-for-conditional', a toplevel procedure
  In conditional expression

    (if (scheme#values 1 2) 1 (##core#undefined))

  Test condition has always true value of type

    fixnum

Warning: In `multiple-values-for-conditional', a toplevel procedure
  expected a single result in `let' binding of `gXXX', but received 2 results

Warning: Type mismatch (test-scrutinizer-message-format.scm:XXX) 
  In `m#toplevel-foo', a toplevel procedure
  In `local-bar', a local procedure
  In `r-proc-call-argument-count-mismatch', a local procedure
  In procedure call

    (scheme#cons '())

  Procedure `cons' is called with 1 argument but 2 arguments are expected.

  Procedure `cons' from module `scheme' has type

    ('aXXX 'bXXX --> (pair 'aXXX 'bXXX))

Warning: Type mismatch (test-scrutinizer-message-format.scm:XXX) 
  In `m#toplevel-foo', a toplevel procedure
  In `local-bar', a local procedure
  In `r-proc-call-argument-type-mismatch', a local procedure
  In procedure call

    (scheme#length 'symbol)

  Argument #1 to procedure `length' has invalid type

    symbol

  The expected type is

    list

  Procedure `length' from module `scheme' has type

    (list -> fixnum)

Warning: In `m#toplevel-foo', a toplevel procedure
  In `local-bar', a local procedure
  In `r-proc-call-argument-value-count', a local procedure
  (test-scrutinizer-message-format.scm:XXX) expected a single result in argument #1 of procedure call `(scheme#list (chicken.time#cpu-time))', but received 2 results

Warning: In `m#toplevel-foo', a toplevel procedure
  In `local-bar', a local procedure
  In `r-proc-call-argument-value-count', a local procedure
  (test-scrutinizer-message-format.scm:XXX) expected a single result in argument #1 of procedure call `(scheme#vector (scheme#values))', but received zero results

Warning: In `m#toplevel-foo', a toplevel procedure
  In `local-bar', a local procedure
  In `r-proc-call-argument-value-count', a local procedure
  expected a single result in `let' binding of `gXXX', but received zero results

Warning: Type mismatch (test-scrutinizer-message-format.scm:XXX) 
  In `m#toplevel-foo', a toplevel procedure
  In `local-bar', a local procedure
  In `r-cond-branch-value-count-mismatch', a local procedure
  In conditional expression

    (if (the * 1) 1 (chicken.time#cpu-time))

  The branches have different number of returned values.

  The true branch returns 1 value

    1

  The false branch returns 2 values

    (chicken.time#cpu-time)

Warning: Type mismatch
  In `m#toplevel-foo', a toplevel procedure
  In `local-bar', a local procedure
  In `r-invalid-called-procedure-type', a local procedure
  In procedure call

    (1 2)

  Procedure in a procedure call has invalid type

    fixnum

  The expected type is

    (* -> *)

Note: Type mismatch (test-scrutinizer-message-format.scm:XXX) 
  In `m#toplevel-foo', a toplevel procedure
  In `local-bar', a local procedure
  In `r-pred-call-always-true', a local procedure
  In predicate call

    (scheme#list? '())

  Predicate call will always return true.

  Procedure `list?' from module `scheme' is a predicate for

    list

  The given argument has type

    null

Note: Type mismatch (test-scrutinizer-message-format.scm:XXX) 
  In `m#toplevel-foo', a toplevel procedure
  In `local-bar', a local procedure
  In `r-pred-call-always-false', a local procedure
  In predicate call

    (scheme#symbol? 1)

  Predicate call will always return false.

  Procedure `symbol?' from module `scheme' is a predicate for

    symbol

  The given argument has type

    fixnum

Note: Type mismatch (test-scrutinizer-message-format.scm:XXX) 
  In `m#toplevel-foo', a toplevel procedure
  In `local-bar', a local procedure
  In `r-cond-test-always-true', a local procedure
  In conditional expression

    (if (scheme#length '()) 1 (##core#undefined))

  Test condition has always true value of type

    fixnum

Note: Type mismatch
  In `m#toplevel-foo', a toplevel procedure
  In `local-bar', a local procedure
  In `r-cond-test-always-false', a local procedure
  In conditional expression

    (if #f 1 (##core#undefined))

  Test condition is always false.

Warning: Type mismatch
  In `m#toplevel-foo', a toplevel procedure
  In `local-bar', a local procedure
  In `r-type-mismatch-in-the', a local procedure
  In expression

    1

  Expression's declared and actual types do not match.

  The actual type is

    fixnum

  The expression's declared type is

    symbol

Warning: Type mismatch (test-scrutinizer-message-format.scm:XXX) 
  In `m#toplevel-foo', a toplevel procedure
  In `local-bar', a local procedure
  In `r-zero-values-for-the', a local procedure
  In expression

    (scheme#values)

  Expression returns 0 values but is declared to return

    symbol

Warning: Type mismatch (test-scrutinizer-message-format.scm:XXX) 
  In `m#toplevel-foo', a toplevel procedure
  In `local-bar', a local procedure
  In `r-too-many-values-for-the', a local procedure
  In expression

    (scheme#values 1 2)

  Expression returns too many values.

  The expression returns 2 values but is declared to return

    symbol

Warning: Type mismatch (test-scrutinizer-message-format.scm:XXX) 
  In `m#toplevel-foo', a toplevel procedure
  In `local-bar', a local procedure
  In `r-too-many-values-for-the', a local procedure
  In expression

    (scheme#values 1 2)

  Expression's declared and actual types do not match.

  The actual type is

    fixnum

  The expression's declared type is

    symbol

Warning: Type mismatch
  In `m#toplevel-foo', a toplevel procedure
  In `local-bar', a local procedure
  In `r-toplevel-var-assignment-type-mismatch', a local procedure
  In assignment

    (set! m#foo2 1)

  Variable `m#foo2' is assigned invalid value.

  The assigned value has type

    fixnum

  The declared type of `m#foo2' is

    boolean

Warning: Type mismatch
  In `m#toplevel-foo', a toplevel procedure
  In `local-bar', a local procedure
  In `r-deprecated-identifier', a local procedure
  In expression

    m#deprecated-foo

  Use of deprecated identifier `deprecated-foo' from module `m'.

Warning: Type mismatch
  In `m#toplevel-foo', a toplevel procedure
  In `local-bar', a local procedure
  In `r-deprecated-identifier', a local procedure
  In expression

    m#deprecated-foo2

  Use of deprecated identifier `deprecated-foo2' from module `m'.

  The suggested alternative is `foo'.

Warning: In `m#toplevel-foo', a toplevel procedure
  In `local-bar', a local procedure
  In `list-ref-negative-index', a local procedure
  (test-scrutinizer-message-format.scm:XXX) in procedure call to `scheme#list-ref', index -1 is negative, which is never valid

Warning: In `m#toplevel-foo', a toplevel procedure
  In `local-bar', a local procedure
  In `list-ref-out-of-range', a local procedure
  (test-scrutinizer-message-format.scm:XXX) in procedure call to `scheme#list-ref', index 1 out of range for proper list of length 0

Warning: In `m#toplevel-foo', a toplevel procedure
  In `local-bar', a local procedure
  In `vector-ref-out-of-range', a local procedure
  (test-scrutinizer-message-format.scm:XXX) in procedure call to `scheme#vector-ref', index -1 out of range for vector of length 0

Warning: In `m#toplevel-foo', a toplevel procedure
  In `local-bar', a local procedure
  In `zero-values-for-let', a local procedure
  expected a single result in `let' binding of `a', but received zero results

Warning: In `m#toplevel-foo', a toplevel procedure
  In `local-bar', a local procedure
  In `multiple-values-for-let', a local procedure
  expected a single result in `let' binding of `a', but received 2 results

Warning: In `m#toplevel-foo', a toplevel procedure
  In `local-bar', a local procedure
  In `zero-values-for-conditional', a local procedure
  expected a single result in conditional, but received zero results

Warning: In `m#toplevel-foo', a toplevel procedure
  In `local-bar', a local procedure
  In `multiple-values-for-conditional', a local procedure
  expected a single result in conditional, but received 2 results

Note: Type mismatch (test-scrutinizer-message-format.scm:XXX) 
  In `m#toplevel-foo', a toplevel procedure
  In `local-bar', a local procedure
  In `multiple-values-for-conditional', a local procedure
  In conditional expression

    (if (scheme#values 1 2) 1 (##core#undefined))

  Test condition has always true value of type

    fixnum

Warning: In `m#toplevel-foo', a toplevel procedure
  In `local-bar', a local procedure
  In `multiple-values-for-conditional', a local procedure
  expected a single result in `let' binding of `gXXX', but received 2 results

Error: Type mismatch (test-scrutinizer-message-format.scm:XXX) 
  In `m#toplevel-foo', a toplevel procedure
  In `local-bar', a local procedure
  In `fail-compiler-typecase', a local procedure
  In `compiler-typecase' expression

    (compiler-typecase gXXX (symbol 1) (list 2) (else (##core#undefined)))

  Tested expression in `compiler-typecase' does not match any case.

  The expression has type

    fixnum

  The specified type cases are these

    symbol

    list
