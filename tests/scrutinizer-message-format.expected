;; numbers replaced with XXX by redact-gensyms.scm
;; prefixes: (tmp g scm: a b)

Warning: literal in operator position: (1 2)

Warning: literal in operator position: (1 2)

Warning: Wrong number of arguments (test-scrutinizer-message-format.scm:XXX) 
  In `r-proc-call-argument-count-mismatch', a toplevel procedure
  In procedure call:

    (scheme#cons '())

  Procedure `cons' is called with 1 argument but 2 arguments are expected.

  Procedure `cons' from module `scheme' has this type:

    ('aXXX 'bXXX --> (pair 'aXXX 'bXXX))

Warning: Invalid argument (test-scrutinizer-message-format.scm:XXX) 
  In `r-proc-call-argument-type-mismatch', a toplevel procedure
  In procedure call:

    (scheme#length 'symbol)

  Argument #1 to procedure `length' has an invalid type:

    symbol

  The expected type is:

    list

  This is the expression:

    'symbol

  Procedure `length' from module `scheme' has this type:

    (list -> fixnum)

Warning: Too many argument values (test-scrutinizer-message-format.scm:XXX) 
  In `r-proc-call-argument-value-count', a toplevel procedure
  In procedure call:

    (scheme#list (chicken.time#cpu-time))

  Argument #1 to procedure `list' returns 2 values but 1 is expected.

  It is a call to `cpu-time' from module `chicken.time' which has this type:

    (-> fixnum fixnum)

  This is the expression:

    (chicken.time#cpu-time)

Warning: Not enough argument values (test-scrutinizer-message-format.scm:XXX) 
  In `r-proc-call-argument-value-count', a toplevel procedure
  In procedure call:

    (scheme#vector (scheme#values))

  Argument #1 to procedure `vector' does not return any values.

  It is a call to `values' from module `scheme' which has this type:

    (procedure (#!rest values) . *)

  This is the expression:

    (scheme#values)

Warning: In `r-proc-call-argument-value-count', a toplevel procedure
  expected a single result in `let' binding of `gXXX', but received zero results

Warning: Branch values mismatch (test-scrutinizer-message-format.scm:XXX) 
  In `r-cond-branch-value-count-mismatch', a toplevel procedure
  In conditional expression:

    (if (the * 1) 1 (scheme#values 1 2))

  The branches have different numbers of values.

  The true branch returns 1 value:

    1

  The false branch returns 2 values:

    (scheme#values 1 2)

Warning: Invalid procedure
  In `r-invalid-called-procedure-type', a toplevel procedure
  In procedure call:

    (1 2)

  The procedure expression does not appear to be a callable.

  This is the expression:

    1

  The expected type is:

    (* -> *)

  The actual type is:

    fixnum

Note: Predicate is always true (test-scrutinizer-message-format.scm:XXX) 
  In `r-pred-call-always-true', a toplevel procedure
  In procedure call:

    (scheme#list? '())

  The predicate will always return true.

  Procedure `list?' from module `scheme' is a predicate for:

    list

  The given argument has this type:

    null

Note: Predicate is always false (test-scrutinizer-message-format.scm:XXX) 
  In `r-pred-call-always-false', a toplevel procedure
  In procedure call:

    (scheme#symbol? 1)

  The predicate will always return false.

  Procedure `symbol?' from module `scheme' is a predicate for:

    symbol

  The given argument has this type:

    fixnum

Note: Test is always true
  In `r-cond-test-always-true', a toplevel procedure
  In conditional expression:

    (if 'symbol 1 (##core#undefined))

  Test condition has always true value of type:

    symbol

Note: Test is always false
  In `r-cond-test-always-false', a toplevel procedure
  In conditional expression:

    (if #f 1 (##core#undefined))

  Test condition is always false.

Warning: Type mismatch
  In `r-type-mismatch-in-the', a toplevel procedure
  In expression:

    1

  Expression's declared and actual types do not match.

  The declared type is:

    symbol

  The actual type is:

    fixnum

Warning: Not enough values (test-scrutinizer-message-format.scm:XXX) 
  In `r-zero-values-for-the', a toplevel procedure
  In expression:

    (scheme#values)

  Expression returns 0 values but is declared to return:

    symbol

Warning: Too many values (test-scrutinizer-message-format.scm:XXX) 
  In `r-too-many-values-for-the', a toplevel procedure
  In expression:

    (scheme#values 1 2)

  Expression returns too many values.

  The expression returns 2 values but is declared to return:

    symbol

Warning: Type mismatch (test-scrutinizer-message-format.scm:XXX) 
  In `r-too-many-values-for-the', a toplevel procedure
  In expression:

    (scheme#values 1 2)

  Expression's declared and actual types do not match.

  The declared type is:

    symbol

  The actual type is:

    fixnum

Warning: Invalid assignment
  In `r-toplevel-var-assignment-type-mismatch', a toplevel procedure
  In assignment:

    (set! foo 1)

  Variable `foo' is assigned invalid value.

  The assigned value has this type:

    fixnum

  The declared type of `foo' is:

    boolean

Warning: Deprecated identifier `deprecated-foo'
  In `r-deprecated-identifier', a toplevel procedure
  In expression:

    deprecated-foo

  Use of deprecated identifier `deprecated-foo'.

Warning: Deprecated identifier `deprecated-foo2'
  In `r-deprecated-identifier', a toplevel procedure
  In expression:

    deprecated-foo2

  Use of deprecated identifier `deprecated-foo2'.

  The suggested alternative is `foo'.

Warning: Invalid assignment
  At toplevel
  In assignment:

    (set! foo 1)

  Variable `foo' is assigned invalid value.

  The assigned value has this type:

    fixnum

  The declared type of `foo' is:

    boolean

Warning: Negative list index (test-scrutinizer-message-format.scm:XXX) 
  In `list-ref-negative-index', a toplevel procedure
  In procedure call:

    (scheme#list-ref '() -1)

  Procedure `list-ref' from module `scheme' is called with a negative index -1.

Warning: List index out of range (test-scrutinizer-message-format.scm:XXX) 
  In `list-ref-out-of-range', a toplevel procedure
  In procedure call:

    (scheme#list-ref '() 1)

  Procedure `list-ref' from module `scheme' is called with index `1' for a list of length `0'.

Warning: Negative vector index (test-scrutinizer-message-format.scm:XXX) 
  In `vector-ref-out-of-range', a toplevel procedure
  In procedure call:

    (scheme#vector-ref (scheme#vector) -1)

  Procedure `vector-ref' from module `scheme' is called with a negative index -1.

Warning: In `zero-values-for-let', a toplevel procedure
  expected a single result in `let' binding of `a', but received zero results

Warning: In `multiple-values-for-let', a toplevel procedure
  expected a single result in `let' binding of `a', but received 2 results

Warning: In `zero-values-for-conditional', a toplevel procedure
  expected a single result in conditional, but received zero results

Warning: In `multiple-values-for-conditional', a toplevel procedure
  expected a single result in conditional, but received 2 results

Note: Test is always true (test-scrutinizer-message-format.scm:XXX) 
  In `multiple-values-for-conditional', a toplevel procedure
  In conditional expression:

    (if (scheme#values 1 2) 1 (##core#undefined))

  Test condition has always true value of type:

    fixnum

Warning: In `multiple-values-for-conditional', a toplevel procedure
  expected a single result in `let' binding of `gXXX', but received 2 results

Warning: Wrong number of arguments (test-scrutinizer-message-format.scm:XXX) 
  In `m#toplevel-foo', a toplevel procedure
  In `local-bar', a local procedure
  In `r-proc-call-argument-count-mismatch', a local procedure
  In procedure call:

    (scheme#cons '())

  Procedure `cons' is called with 1 argument but 2 arguments are expected.

  Procedure `cons' from module `scheme' has this type:

    ('aXXX 'bXXX --> (pair 'aXXX 'bXXX))

Warning: Invalid argument (test-scrutinizer-message-format.scm:XXX) 
  In `m#toplevel-foo', a toplevel procedure
  In `local-bar', a local procedure
  In `r-proc-call-argument-type-mismatch', a local procedure
  In procedure call:

    (scheme#length 'symbol)

  Argument #1 to procedure `length' has an invalid type:

    symbol

  The expected type is:

    list

  This is the expression:

    'symbol

  Procedure `length' from module `scheme' has this type:

    (list -> fixnum)

Warning: Too many argument values (test-scrutinizer-message-format.scm:XXX) 
  In `m#toplevel-foo', a toplevel procedure
  In `local-bar', a local procedure
  In `r-proc-call-argument-value-count', a local procedure
  In procedure call:

    (scheme#list (chicken.time#cpu-time))

  Argument #1 to procedure `list' returns 2 values but 1 is expected.

  It is a call to `cpu-time' from module `chicken.time' which has this type:

    (-> fixnum fixnum)

  This is the expression:

    (chicken.time#cpu-time)

Warning: Not enough argument values (test-scrutinizer-message-format.scm:XXX) 
  In `m#toplevel-foo', a toplevel procedure
  In `local-bar', a local procedure
  In `r-proc-call-argument-value-count', a local procedure
  In procedure call:

    (scheme#vector (scheme#values))

  Argument #1 to procedure `vector' does not return any values.

  It is a call to `values' from module `scheme' which has this type:

    (procedure (#!rest values) . *)

  This is the expression:

    (scheme#values)

Warning: In `m#toplevel-foo', a toplevel procedure
  In `local-bar', a local procedure
  In `r-proc-call-argument-value-count', a local procedure
  expected a single result in `let' binding of `gXXX', but received zero results

Warning: Branch values mismatch (test-scrutinizer-message-format.scm:XXX) 
  In `m#toplevel-foo', a toplevel procedure
  In `local-bar', a local procedure
  In `r-cond-branch-value-count-mismatch', a local procedure
  In conditional expression:

    (if (the * 1) 1 (chicken.time#cpu-time))

  The branches have different numbers of values.

  The true branch returns 1 value:

    1

  The false branch returns 2 values:

    (chicken.time#cpu-time)

Warning: Invalid procedure
  In `m#toplevel-foo', a toplevel procedure
  In `local-bar', a local procedure
  In `r-invalid-called-procedure-type', a local procedure
  In procedure call:

    (1 2)

  The procedure expression does not appear to be a callable.

  This is the expression:

    1

  The expected type is:

    (* -> *)

  The actual type is:

    fixnum

Note: Predicate is always true (test-scrutinizer-message-format.scm:XXX) 
  In `m#toplevel-foo', a toplevel procedure
  In `local-bar', a local procedure
  In `r-pred-call-always-true', a local procedure
  In procedure call:

    (scheme#list? '())

  The predicate will always return true.

  Procedure `list?' from module `scheme' is a predicate for:

    list

  The given argument has this type:

    null

Note: Predicate is always false (test-scrutinizer-message-format.scm:XXX) 
  In `m#toplevel-foo', a toplevel procedure
  In `local-bar', a local procedure
  In `r-pred-call-always-false', a local procedure
  In procedure call:

    (scheme#symbol? 1)

  The predicate will always return false.

  Procedure `symbol?' from module `scheme' is a predicate for:

    symbol

  The given argument has this type:

    fixnum

Note: Test is always true (test-scrutinizer-message-format.scm:XXX) 
  In `m#toplevel-foo', a toplevel procedure
  In `local-bar', a local procedure
  In `r-cond-test-always-true', a local procedure
  In conditional expression:

    (if (scheme#length '()) 1 (##core#undefined))

  Test condition has always true value of type:

    fixnum

Note: Test is always false
  In `m#toplevel-foo', a toplevel procedure
  In `local-bar', a local procedure
  In `r-cond-test-always-false', a local procedure
  In conditional expression:

    (if #f 1 (##core#undefined))

  Test condition is always false.

Warning: Type mismatch
  In `m#toplevel-foo', a toplevel procedure
  In `local-bar', a local procedure
  In `r-type-mismatch-in-the', a local procedure
  In expression:

    1

  Expression's declared and actual types do not match.

  The declared type is:

    symbol

  The actual type is:

    fixnum

Warning: Not enough values (test-scrutinizer-message-format.scm:XXX) 
  In `m#toplevel-foo', a toplevel procedure
  In `local-bar', a local procedure
  In `r-zero-values-for-the', a local procedure
  In expression:

    (scheme#values)

  Expression returns 0 values but is declared to return:

    symbol

Warning: Too many values (test-scrutinizer-message-format.scm:XXX) 
  In `m#toplevel-foo', a toplevel procedure
  In `local-bar', a local procedure
  In `r-too-many-values-for-the', a local procedure
  In expression:

    (scheme#values 1 2)

  Expression returns too many values.

  The expression returns 2 values but is declared to return:

    symbol

Warning: Type mismatch (test-scrutinizer-message-format.scm:XXX) 
  In `m#toplevel-foo', a toplevel procedure
  In `local-bar', a local procedure
  In `r-too-many-values-for-the', a local procedure
  In expression:

    (scheme#values 1 2)

  Expression's declared and actual types do not match.

  The declared type is:

    symbol

  The actual type is:

    fixnum

Warning: Invalid assignment
  In `m#toplevel-foo', a toplevel procedure
  In `local-bar', a local procedure
  In `r-toplevel-var-assignment-type-mismatch', a local procedure
  In assignment:

    (set! m#foo2 1)

  Variable `foo2' is assigned invalid value.

  The assigned value has this type:

    fixnum

  The declared type of `foo2' from module `m' is:

    boolean

Warning: Deprecated identifier `deprecated-foo'
  In `m#toplevel-foo', a toplevel procedure
  In `local-bar', a local procedure
  In `r-deprecated-identifier', a local procedure
  In expression:

    m#deprecated-foo

  Use of deprecated identifier `deprecated-foo' from module `m'.

Warning: Deprecated identifier `deprecated-foo2'
  In `m#toplevel-foo', a toplevel procedure
  In `local-bar', a local procedure
  In `r-deprecated-identifier', a local procedure
  In expression:

    m#deprecated-foo2

  Use of deprecated identifier `deprecated-foo2' from module `m'.

  The suggested alternative is `foo'.

Warning: Negative list index (test-scrutinizer-message-format.scm:XXX) 
  In `m#toplevel-foo', a toplevel procedure
  In `local-bar', a local procedure
  In `list-ref-negative-index', a local procedure
  In procedure call:

    (scheme#list-ref '() -1)

  Procedure `list-ref' from module `scheme' is called with a negative index -1.

Warning: List index out of range (test-scrutinizer-message-format.scm:XXX) 
  In `m#toplevel-foo', a toplevel procedure
  In `local-bar', a local procedure
  In `list-ref-out-of-range', a local procedure
  In procedure call:

    (scheme#list-ref '() 1)

  Procedure `list-ref' from module `scheme' is called with index `1' for a list of length `0'.

Warning: Negative vector index (test-scrutinizer-message-format.scm:XXX) 
  In `m#toplevel-foo', a toplevel procedure
  In `local-bar', a local procedure
  In `vector-ref-out-of-range', a local procedure
  In procedure call:

    (scheme#vector-ref (scheme#vector) -1)

  Procedure `vector-ref' from module `scheme' is called with a negative index -1.

Warning: In `m#toplevel-foo', a toplevel procedure
  In `local-bar', a local procedure
  In `zero-values-for-let', a local procedure
  expected a single result in `let' binding of `a', but received zero results

Warning: In `m#toplevel-foo', a toplevel procedure
  In `local-bar', a local procedure
  In `multiple-values-for-let', a local procedure
  expected a single result in `let' binding of `a', but received 2 results

Warning: In `m#toplevel-foo', a toplevel procedure
  In `local-bar', a local procedure
  In `zero-values-for-conditional', a local procedure
  expected a single result in conditional, but received zero results

Warning: In `m#toplevel-foo', a toplevel procedure
  In `local-bar', a local procedure
  In `multiple-values-for-conditional', a local procedure
  expected a single result in conditional, but received 2 results

Note: Test is always true (test-scrutinizer-message-format.scm:XXX) 
  In `m#toplevel-foo', a toplevel procedure
  In `local-bar', a local procedure
  In `multiple-values-for-conditional', a local procedure
  In conditional expression:

    (if (scheme#values 1 2) 1 (##core#undefined))

  Test condition has always true value of type:

    fixnum

Warning: In `m#toplevel-foo', a toplevel procedure
  In `local-bar', a local procedure
  In `multiple-values-for-conditional', a local procedure
  expected a single result in `let' binding of `gXXX', but received 2 results

Error: No typecase match (test-scrutinizer-message-format.scm:XXX) 
  In `m#toplevel-foo', a toplevel procedure
  In `local-bar', a local procedure
  In `fail-compiler-typecase', a local procedure
  In `compiler-typecase' expression:

    (compiler-typecase gXXX (symbol 1) (list 2) (else (##core#undefined)))

  Tested expression does not match any case.

  The expression has this type:

    fixnum

  The specified type cases are these:

    symbol

    list
