SECTION(2 1)
SECTION(3 4)
 #<procedure (boolean? x178)>
    #<procedure (char? x1492)>
       #<procedure (null? x260)>
          #<procedure (##sys#number? x1080)>
             #<procedure (pair? x189)>
                #<procedure (procedure? x1603)>
                   #<procedure (string? x337)>
                      #<procedure (symbol? x1251)>
                         #<procedure (vector? x1387)>
(#t #f #f #f #f #f #f #f #f)#t
(#t #f #f #f #f #f #f #f #f)#f
(#f #t #f #f #f #f #f #f #f)#\a
(#f #f #t #f #f #f #f #f #f)()
(#f #f #f #t #f #f #f #f #f)9739
(#f #f #f #f #t #f #f #f #f)(test)
(#f #f #f #f #f #t #f #f #f)#<procedure (record-error e)>
(#f #f #f #f #f #f #t #f #f)"test"
(#f #f #f #f #f #f #t #f #f)""
(#f #f #f #f #f #f #f #t #f)test
(#f #f #f #f #f #f #f #f #t)#()
(#f #f #f #f #f #f #f #f #t)#(a b c)
SECTION(4 1 2)
(quote (quote a))  ==> (quote a)
(quote (quote a))  ==> (quote a)
SECTION(4 1 3)
(#<procedure C_times> 3 4)  ==> 12
SECTION(4 1 4)
(#<procedure (? x)> 4)  ==> 8
(#<procedure (reverse-subtract x y)> 7 10)  ==> 3
(#<procedure (? y)> 6)  ==> 10
(#<procedure (? . x)> 3 4 5 6)  ==> (3 4 5 6)
(#<procedure (? x y . z)> 3 4 5 6)  ==> (5 6)
SECTION(4 1 5)
(if yes)  ==> yes
(if no)  ==> no
(if 1)  ==> 1
SECTION(4 1 6)
(define 3)  ==> 3
(set! 5)  ==> 5
SECTION(4 2 1)
(cond greater)  ==> greater
(cond equal)  ==> equal
(cond 2)  ==> 2
(case composite)  ==> composite
(case consonant)  ==> consonant
(and #t)  ==> #t
(and #f)  ==> #f
(and (f g))  ==> (f g)
(and #t)  ==> #t
(or #t)  ==> #t
(or #t)  ==> #t
(or #f)  ==> #f
(or #f)  ==> #f
(or (b c))  ==> (b c)
SECTION(4 2 2)
(let 6)  ==> 6
(let 35)  ==> 35
(let* 70)  ==> 70
(letrec #t)  ==> #t
(let 5)  ==> 5
(let 34)  ==> 34
(let 6)  ==> 6
(let 34)  ==> 34
(let* 7)  ==> 7
(let* 34)  ==> 34
(let* 8)  ==> 8
(let* 34)  ==> 34
(letrec 9)  ==> 9
(letrec 34)  ==> 34
(letrec 10)  ==> 10
(letrec 34)  ==> 34
SECTION(4 2 3)
(begin 6)  ==> 6
SECTION(4 2 4)
(do #(0 1 2 3 4))  ==> #(0 1 2 3 4)
(do 25)  ==> 25
(let 1)  ==> 1
(let ((6 1 3) (-5 -2)))  ==> ((6 1 3) (-5 -2))
(let -1)  ==> -1
SECTION(4 2 6)
(quasiquote (list 3 4))  ==> (list 3 4)
(quasiquote (list a (quote a)))  ==> (list a (quote a))
(quasiquote (a 3 4 5 6 b))  ==> (a 3 4 5 6 b)
(quasiquote ((foo 7) . cons))  ==> ((foo 7) . cons)
(quasiquote #(10 5 2 4 3 8))  ==> #(10 5 2 4 3 8)
(quasiquote 5)  ==> 5
(quasiquote (a (quasiquote (b (unquote (+ 1 2)) (unquote (foo 4 d)) e)) f))  ==> (a (quasiquote (b (unquote (+ 1 2)) (unquote (foo 4 d)) e)) f)
(quasiquote (a (quasiquote (b (unquote x) (unquote (quote y)) d)) e))  ==> (a (quasiquote (b (unquote x) (unquote (quote y)) d)) e)
(quasiquote (list 3 4))  ==> (list 3 4)
(quasiquote (quasiquote (list (unquote (+ 1 2)) 4)))  ==> (quasiquote (list (unquote (+ 1 2)) 4))
SECTION(5 2 1)
(define 6)  ==> 6
(define 1)  ==> 1
(#<procedure (add3 x)> 6)  ==> (3 6)
(#<procedure (add3 x)> 6)  ==> 9
SECTION(5 2 2)
(#<procedure (foo)>)  ==> 5
(define 34)  ==> 34
(#<procedure (foo)>)  ==> 5
(define 34)  ==> 34
(#<procedure (foo x)> 88)  ==> 88
(#<procedure (foo x)> 4)  ==> 4
(define 34)  ==> 34
(internal-define 99)  ==> 99
(internal-define 77)  ==> 77
SECTION(6 1)
(#<procedure (not x176)> #t)  ==> #f
(#<procedure (not x176)> 3)  ==> #f
(#<procedure (not x176)> (3))  ==> #f
(#<procedure (not x176)> #f)  ==> #t
(#<procedure (not x176)> ())  ==> #f
(#<procedure (not x176)> ())  ==> #f
(#<procedure (not x176)> nil)  ==> #f
SECTION(6 2)
(#<procedure (eqv? x183 y184)> a a)  ==> #t
(#<procedure (eqv? x183 y184)> a b)  ==> #f
(#<procedure (eqv? x183 y184)> 2 2)  ==> #t
(#<procedure (eqv? x183 y184)> () ())  ==> #t
(#<procedure (eqv? x183 y184)> 10000 10000)  ==> #t
(#<procedure (eqv? x183 y184)> (1 . 2) (1 . 2))  ==> #f
(#<procedure (eqv? x183 y184)> #<procedure (?)> #<procedure (?)>)  ==> #f
(#<procedure (eqv? x183 y184)> #f nil)  ==> #f
(#<procedure (eqv? x183 y184)> #<procedure (p x)> #<procedure (p x)>)  ==> #t
(#<procedure (eqv? x183 y184)> #<procedure (?)> #<procedure (?)>)  ==> #t
(#<procedure (eqv? x183 y184)> #<procedure (?)> #<procedure (?)>)  ==> #f
(#<procedure (eqv? x183 y184)> #<procedure (f)> #<procedure (g)>)  ==> #f
(#<procedure (eq? x180 y181)> a a)  ==> #t
(#<procedure (eq? x180 y181)> (a) (a))  ==> #f
(#<procedure (eq? x180 y181)> () ())  ==> #t
(#<procedure (eq? x180 y181)> #<procedure (f_6381 x194)> #<procedure (f_6381 x194)>)  ==> #t
(#<procedure (eq? x180 y181)> (a) (a))  ==> #t
(#<procedure (eq? x180 y181)> #() #())  ==> #t
(#<procedure (eq? x180 y181)> #<procedure (x x)> #<procedure (x x)>)  ==> #t
(#<procedure (equal? x186 y187)> a a)  ==> #t
(#<procedure (equal? x186 y187)> (a) (a))  ==> #t
(#<procedure (equal? x186 y187)> (a (b) c) (a (b) c))  ==> #t
(#<procedure (equal? x186 y187)> "abc" "abc")  ==> #t
(#<procedure (equal? x186 y187)> 2 2)  ==> #t
(#<procedure (equal? x186 y187)> #(a a a a a) #(a a a a a))  ==> #t
SECTION(6 3)
(dot (a b c d e))  ==> (a b c d e)
(#<procedure (list? x335)> (a b c))  ==> #t
(set-cdr! (a . 4))  ==> (a . 4)
(#<procedure (eqv? x183 y184)> (a . 4) (a . 4))  ==> #t
(dot (a b c . d))  ==> (a b c . d)
(#<procedure (list? x335)> (a . 4))  ==> #f
(list? #f)  ==> #f
(#<procedure (cons x191 y192)> a ())  ==> (a)
(#<procedure (cons x191 y192)> (a) (b c d))  ==> ((a) b c d)
(#<procedure (cons x191 y192)> "a" (b c))  ==> ("a" b c)
(#<procedure (cons x191 y192)> a 3)  ==> (a . 3)
(#<procedure (cons x191 y192)> (a b) c)  ==> ((a b) . c)
(#<procedure (f_6381 x194)> (a b c))  ==> a
(#<procedure (f_6381 x194)> ((a) b c d))  ==> (a)
(#<procedure (f_6381 x194)> (1 . 2))  ==> 1
(#<procedure (f_6384 x196)> ((a) b c d))  ==> (b c d)
(#<procedure (f_6384 x196)> (1 . 2))  ==> 2
(#<procedure (list . lst262)> a 7 c)  ==> (a 7 c)
(#<procedure (list . lst262)>)  ==> ()
(#<procedure (length lst264)> (a b c))  ==> 3
(#<procedure (length lst264)> (a (b) (c d e)))  ==> 3
(#<procedure (length lst264)> ())  ==> 0
(#<procedure (append . lsts291)> (x) (y))  ==> (x y)
(#<procedure (append . lsts291)> (a) (b c d))  ==> (a b c d)
(#<procedure (append . lsts291)> (a (b)) ((c)))  ==> (a (b) (c))
(#<procedure (append . lsts291)>)  ==> ()
(#<procedure (append . lsts291)> (a b) (c . d))  ==> (a b c . d)
(#<procedure (append . lsts291)> () a)  ==> a
(#<procedure (reverse lst0305)> (a b c))  ==> (c b a)
(#<procedure (reverse lst0305)> (a (b c) d (e (f))))  ==> ((e (f)) d (b c) a)
(#<procedure (list-ref lst269 i270)> (a b c d) 2)  ==> c
(#<procedure (memq x317 lst318)> a (a b c))  ==> (a b c)
(#<procedure (memq x317 lst318)> b (a b c))  ==> (b c)
(#<procedure (memq x317 lst318)> a (b c d))  ==> #f
(#<procedure (memq x317 lst318)> (a) (b (a) c))  ==> #f
(#<procedure (member x323 lst324)> (a) (b (a) c))  ==> ((a) c)
(#<procedure (memv x320 lst321)> 101 (100 101 102))  ==> (101 102)
(#<procedure (assq x326 lst327)> a ((a 1) (b 2) (c 3)))  ==> (a 1)
(#<procedure (assq x326 lst327)> b ((a 1) (b 2) (c 3)))  ==> (b 2)
(#<procedure (assq x326 lst327)> d ((a 1) (b 2) (c 3)))  ==> #f
(#<procedure (assq x326 lst327)> (a) (((a)) ((b)) ((c))))  ==> #f
(#<procedure (assoc x332 lst333)> (a) (((a)) ((b)) ((c))))  ==> ((a))
(#<procedure (assv x329 lst330)> 5 ((2 3) (5 7) (11 13)))  ==> (5 7)
SECTION(6 4)
(#<procedure (symbol? x1251)> a)  ==> #t
(standard-case #f)  ==> #f
 BUT EXPECTED #t
(standard-case #f)  ==> #f
 BUT EXPECTED #t
(#<procedure (symbol->string s1295)> flying-fish)  ==> "flying-fish"
 BUT EXPECTED "FLYING-FISH"
(#<procedure (symbol->string s1295)> Martin)  ==> "Martin"
 BUT EXPECTED "MARTIN"
(#<procedure (symbol->string s1295)> Malvina)  ==> "Malvina"
(standard-case #f)  ==> #f
 BUT EXPECTED #t
(string-set! "cb")  ==> "cb"
(#<procedure (symbol->string s1295)> ab)  ==> "ab"
(#<procedure (string->symbol str1298)> "ab")  ==> ab
(#<procedure (eq? x180 y181)> mISSISSIppi mississippi)  ==> #f
 BUT EXPECTED #t
(string->symbol #t)  ==> #t
 BUT EXPECTED #f
(#<procedure (string->symbol str1298)> "JollyWog")  ==> JollyWog
SECTION(6 5 5)
(#<procedure (##sys#number? x1080)> 3)  ==> #t
(#<procedure (##sys#number? x1080)> 3)  ==> #t
(#<procedure (##sys#number? x1080)> 3)  ==> #t
(#<procedure (rational? n1082)> 3)  ==> #t
(#<procedure (##sys#integer? x1084)> 3)  ==> #t
(#<procedure (##sys#exact? x1086)> 3)  ==> #t
(#<procedure (##sys#inexact? x1088)> 3)  ==> #f
(#<procedure C_nequalp> 22 22 22)  ==> #t
(#<procedure C_nequalp> 22 22)  ==> #t
(#<procedure C_nequalp> 34 34 35)  ==> #f
(#<procedure C_nequalp> 34 35)  ==> #f
(#<procedure C_greaterp> 3 -6246)  ==> #t
(#<procedure C_greaterp> 9 9 -2424)  ==> #f
(#<procedure C_greater_or_equal_p> 3 -4 -6246)  ==> #t
(#<procedure C_greater_or_equal_p> 9 9)  ==> #t
(#<procedure C_greater_or_equal_p> 8 9)  ==> #f
(#<procedure C_lessp> -1 2 3 4 5 6 7 8)  ==> #t
(#<procedure C_lessp> -1 2 3 4 4 5 6 7)  ==> #f
(#<procedure C_less_or_equal_p> -1 2 3 4 5 6 7 8)  ==> #t
(#<procedure C_less_or_equal_p> -1 2 3 4 4 5 6 7)  ==> #t
(#<procedure C_lessp> 1 3 2)  ==> #f
(#<procedure C_greater_or_equal_p> 1 3 2)  ==> #f
(#<procedure (zero? n1098)> 0)  ==> #t
(#<procedure (zero? n1098)> 1)  ==> #f
(#<procedure (zero? n1098)> -1)  ==> #f
(#<procedure (zero? n1098)> -100)  ==> #f
(#<procedure (positive? n1100)> 4)  ==> #t
(#<procedure (positive? n1100)> -4)  ==> #f
(#<procedure (positive? n1100)> 0)  ==> #f
(#<procedure (negative? n1102)> 4)  ==> #f
(#<procedure (negative? n1102)> -4)  ==> #t
(#<procedure (negative? n1102)> 0)  ==> #f
(#<procedure (odd? n1154)> 3)  ==> #t
(#<procedure (odd? n1154)> 2)  ==> #f
(#<procedure (odd? n1154)> -4)  ==> #f
(#<procedure (odd? n1154)> -1)  ==> #t
(#<procedure (even? n1152)> 3)  ==> #f
(#<procedure (even? n1152)> 2)  ==> #t
(#<procedure (even? n1152)> -4)  ==> #t
(#<procedure (even? n1152)> -1)  ==> #f
(#<procedure (max n11170 . ns1171)> 34 5 7 38 6)  ==> 38
(#<procedure (min n11172 . ns1173)> 3 5 5 330 4 -24)  ==> -24
(#<procedure C_plus> 3 4)  ==> 7
(#<procedure C_plus> 3)  ==> 3
(#<procedure C_plus>)  ==> 0
(#<procedure C_times> 4)  ==> 4
(#<procedure C_times>)  ==> 1
(#<procedure C_minus> 3 4)  ==> -1
(#<procedure C_minus> 3)  ==> -3
(#<procedure (abs n1104)> -7)  ==> 7
(#<procedure (abs n1104)> 7)  ==> 7
(#<procedure (abs n1104)> 0)  ==> 0
(#<procedure C_quotient> 35 7)  ==> 5
(#<procedure C_quotient> -35 7)  ==> -5
(#<procedure C_quotient> 35 -7)  ==> -5
(#<procedure C_quotient> -35 -7)  ==> 5
(#<procedure (modulo x1145 y1146)> 13 4)  ==> 1
(#<procedure (remainder x1142 y1143)> 13 4)  ==> 1
(#<procedure (modulo x1145 y1146)> -13 4)  ==> 3
(#<procedure (remainder x1142 y1143)> -13 4)  ==> -1
(#<procedure (modulo x1145 y1146)> 13 -4)  ==> -3
(#<procedure (remainder x1142 y1143)> 13 -4)  ==> 1
(#<procedure (modulo x1145 y1146)> -13 -4)  ==> -1
(#<procedure (remainder x1142 y1143)> -13 -4)  ==> -1
(#<procedure (modulo x1145 y1146)> 0 86400)  ==> 0
(#<procedure (modulo x1145 y1146)> 0 -86400)  ==> 0
(#<procedure (divtest n1 n2)> 238 9)  ==> #t
(#<procedure (divtest n1 n2)> -238 9)  ==> #t
(#<procedure (divtest n1 n2)> 238 -9)  ==> #t
(#<procedure (divtest n1 n2)> -238 -9)  ==> #t
(#<procedure (gcd . ns1204)> 0 4)  ==> 4
(#<procedure (gcd . ns1204)> -4 0)  ==> 4
(#<procedure (gcd . ns1204)> 32 -36)  ==> 4
(#<procedure (gcd . ns1204)>)  ==> 0
(#<procedure (lcm . ns1220)> 32 -36)  ==> 288
(#<procedure (lcm . ns1220)>)  ==> 1
SECTION(6 5 5)
(#<procedure (test-string->number str)> "+#.#")  ==> #t
(#<procedure (test-string->number str)> "-#.#")  ==> #t
(#<procedure (test-string->number str)> "#.#")  ==> #t
(#<procedure (test-string->number str)> "1/0")  ==> #t
(#<procedure (test-string->number str)> "-1/0")  ==> #t
(#<procedure (test-string->number str)> "0/0")  ==> #t
(#<procedure (test-string->number str)> "+1/0i")  ==> #t
(#<procedure (test-string->number str)> "-1/0i")  ==> #t
(#<procedure (test-string->number str)> "0/0i")  ==> #t
(#<procedure (test-string->number str)> "0/0-0/0i")  ==> #t
(#<procedure (test-string->number str)> "1/0-1/0i")  ==> #t
(#<procedure (test-string->number str)> "-1/0+1/0i")  ==> #t
(#<procedure (test-string->number str)> "#i")  ==> #t
(#<procedure (test-string->number str)> "#e")  ==> #t
(#<procedure (test-string->number str)> "#")  ==> #t
(#<procedure (test-string->number str)> "#i0/0")  ==> #t
SECTION(6 5 9)
(#<procedure C_number_to_string> 0)  ==> "0"
(#<procedure C_number_to_string> 100)  ==> "100"
(#<procedure C_number_to_string> 256 16)  ==> "100"
(#<procedure C_string_to_number> "100")  ==> 100
(#<procedure C_string_to_number> "100" 16)  ==> 256
(#<procedure C_string_to_number> "")  ==> #f
(#<procedure C_string_to_number> ".")  ==> #f
(#<procedure C_string_to_number> "d")  ==> #f
(#<procedure C_string_to_number> "D")  ==> #f
(#<procedure C_string_to_number> "i")  ==> #f
(#<procedure C_string_to_number> "I")  ==> #f
(#<procedure C_string_to_number> "3i")  ==> #f
(#<procedure C_string_to_number> "3I")  ==> #f
(#<procedure C_string_to_number> "33i")  ==> #f
(#<procedure C_string_to_number> "33I")  ==> #f
(#<procedure C_string_to_number> "3.3i")  ==> #f
(#<procedure C_string_to_number> "3.3I")  ==> #f
(#<procedure C_string_to_number> "-")  ==> #f
(#<procedure C_string_to_number> "+")  ==> #f
(string->number #t)  ==> #t
(string->number #t)  ==> #t
SECTION(6 6)
(#<procedure (char? x1492)> #\a)  ==> #t
(#<procedure (char? x1492)> #\()  ==> #t
(#<procedure (char? x1492)> #\space)  ==> #t
(#<procedure (char? x1492)> #\newline)  ==> #t
(#<procedure (char=? c11500 c21501)> #\A #\B)  ==> #f
(#<procedure (char=? c11500 c21501)> #\a #\b)  ==> #f
(#<procedure (char=? c11500 c21501)> #\9 #\0)  ==> #f
(#<procedure (char=? c11500 c21501)> #\A #\A)  ==> #t
(#<procedure (char<? c11510 c21511)> #\A #\B)  ==> #t
(#<procedure (char<? c11510 c21511)> #\a #\b)  ==> #t
(#<procedure (char<? c11510 c21511)> #\9 #\0)  ==> #f
(#<procedure (char<? c11510 c21511)> #\A #\A)  ==> #f
(#<procedure (char>? c11505 c21506)> #\A #\B)  ==> #f
(#<procedure (char>? c11505 c21506)> #\a #\b)  ==> #f
(#<procedure (char>? c11505 c21506)> #\9 #\0)  ==> #t
(#<procedure (char>? c11505 c21506)> #\A #\A)  ==> #f
(#<procedure (char<=? c11520 c21521)> #\A #\B)  ==> #t
(#<procedure (char<=? c11520 c21521)> #\a #\b)  ==> #t
(#<procedure (char<=? c11520 c21521)> #\9 #\0)  ==> #f
(#<procedure (char<=? c11520 c21521)> #\A #\A)  ==> #t
(#<procedure (char>=? c11515 c21516)> #\A #\B)  ==> #f
(#<procedure (char>=? c11515 c21516)> #\a #\b)  ==> #f
(#<procedure (char>=? c11515 c21516)> #\9 #\0)  ==> #t
(#<procedure (char>=? c11515 c21516)> #\A #\A)  ==> #t
(#<procedure (char-ci=? x1531 y1532)> #\A #\B)  ==> #f
(#<procedure (char-ci=? x1531 y1532)> #\a #\B)  ==> #f
(#<procedure (char-ci=? x1531 y1532)> #\A #\b)  ==> #f
(#<procedure (char-ci=? x1531 y1532)> #\a #\b)  ==> #f
(#<procedure (char-ci=? x1531 y1532)> #\9 #\0)  ==> #f
(#<procedure (char-ci=? x1531 y1532)> #\A #\A)  ==> #t
(#<procedure (char-ci=? x1531 y1532)> #\A #\a)  ==> #t
(#<procedure (char-ci<? x1535 y1536)> #\A #\B)  ==> #t
(#<procedure (char-ci<? x1535 y1536)> #\a #\B)  ==> #t
(#<procedure (char-ci<? x1535 y1536)> #\A #\b)  ==> #t
(#<procedure (char-ci<? x1535 y1536)> #\a #\b)  ==> #t
(#<procedure (char-ci<? x1535 y1536)> #\9 #\0)  ==> #f
(#<procedure (char-ci<? x1535 y1536)> #\A #\A)  ==> #f
(#<procedure (char-ci<? x1535 y1536)> #\A #\a)  ==> #f
(#<procedure (char-ci>? x1533 y1534)> #\A #\B)  ==> #f
(#<procedure (char-ci>? x1533 y1534)> #\a #\B)  ==> #f
(#<procedure (char-ci>? x1533 y1534)> #\A #\b)  ==> #f
(#<procedure (char-ci>? x1533 y1534)> #\a #\b)  ==> #f
(#<procedure (char-ci>? x1533 y1534)> #\9 #\0)  ==> #t
(#<procedure (char-ci>? x1533 y1534)> #\A #\A)  ==> #f
(#<procedure (char-ci>? x1533 y1534)> #\A #\a)  ==> #f
(#<procedure (char-ci<=? x1539 y1540)> #\A #\B)  ==> #t
(#<procedure (char-ci<=? x1539 y1540)> #\a #\B)  ==> #t
(#<procedure (char-ci<=? x1539 y1540)> #\A #\b)  ==> #t
(#<procedure (char-ci<=? x1539 y1540)> #\a #\b)  ==> #t
(#<procedure (char-ci<=? x1539 y1540)> #\9 #\0)  ==> #f
(#<procedure (char-ci<=? x1539 y1540)> #\A #\A)  ==> #t
(#<procedure (char-ci<=? x1539 y1540)> #\A #\a)  ==> #t
(#<procedure (char-ci>=? x1537 y1538)> #\A #\B)  ==> #f
(#<procedure (char-ci>=? x1537 y1538)> #\a #\B)  ==> #f
(#<procedure (char-ci>=? x1537 y1538)> #\A #\b)  ==> #f
(#<procedure (char-ci>=? x1537 y1538)> #\a #\b)  ==> #f
(#<procedure (char-ci>=? x1537 y1538)> #\9 #\0)  ==> #t
(#<procedure (char-ci>=? x1537 y1538)> #\A #\A)  ==> #t
(#<procedure (char-ci>=? x1537 y1538)> #\A #\a)  ==> #t
(#<procedure (char-alphabetic? c1558)> #\a)  ==> #t
(#<procedure (char-alphabetic? c1558)> #\A)  ==> #t
(#<procedure (char-alphabetic? c1558)> #\z)  ==> #t
(#<procedure (char-alphabetic? c1558)> #\Z)  ==> #t
(#<procedure (char-alphabetic? c1558)> #\0)  ==> #f
(#<procedure (char-alphabetic? c1558)> #\9)  ==> #f
(#<procedure (char-alphabetic? c1558)> #\space)  ==> #f
(#<procedure (char-alphabetic? c1558)> #\;)  ==> #f
(#<procedure (char-numeric? c1552)> #\a)  ==> #f
(#<procedure (char-numeric? c1552)> #\A)  ==> #f
(#<procedure (char-numeric? c1552)> #\z)  ==> #f
(#<procedure (char-numeric? c1552)> #\Z)  ==> #f
(#<procedure (char-numeric? c1552)> #\0)  ==> #t
(#<procedure (char-numeric? c1552)> #\9)  ==> #t
(#<procedure (char-numeric? c1552)> #\space)  ==> #f
(#<procedure (char-numeric? c1552)> #\;)  ==> #f
(#<procedure (char-whitespace? c1555)> #\a)  ==> #f
(#<procedure (char-whitespace? c1555)> #\A)  ==> #f
(#<procedure (char-whitespace? c1555)> #\z)  ==> #f
(#<procedure (char-whitespace? c1555)> #\Z)  ==> #f
(#<procedure (char-whitespace? c1555)> #\0)  ==> #f
(#<procedure (char-whitespace? c1555)> #\9)  ==> #f
(#<procedure (char-whitespace? c1555)> #\space)  ==> #t
(#<procedure (char-whitespace? c1555)> #\;)  ==> #f
(#<procedure (char-upper-case? c1546)> #\0)  ==> #f
(#<procedure (char-upper-case? c1546)> #\9)  ==> #f
(#<procedure (char-upper-case? c1546)> #\space)  ==> #f
(#<procedure (char-upper-case? c1546)> #\;)  ==> #f
(#<procedure (char-lower-case? c1549)> #\0)  ==> #f
(#<procedure (char-lower-case? c1549)> #\9)  ==> #f
(#<procedure (char-lower-case? c1549)> #\space)  ==> #f
(#<procedure (char-lower-case? c1549)> #\;)  ==> #f
(#<procedure (integer->char n1497)> 46)  ==> #\.
(#<procedure (integer->char n1497)> 65)  ==> #\A
(#<procedure (integer->char n1497)> 97)  ==> #\a
(#<procedure (char-upcase c1525)> #\A)  ==> #\A
(#<procedure (char-upcase c1525)> #\a)  ==> #\A
(#<procedure (char-downcase c1528)> #\A)  ==> #\a
(#<procedure (char-downcase c1528)> #\a)  ==> #\a
SECTION(6 7)
(#<procedure (string? x337)> "The word \"recursion\\\" has many meanings.")  ==> #t
(string-set! "?**")  ==> "?**"
(#<procedure (string . chars576)> #\a #\b #\c)  ==> "abc"
(#<procedure (string . chars576)>)  ==> ""
(#<procedure (string-length s339)> "abc")  ==> 3
(#<procedure (f_6890 s341 i342)> "abc" 0)  ==> #\a
(#<procedure (f_6890 s341 i342)> "abc" 2)  ==> #\c
(#<procedure (string-length s339)> "")  ==> 0
(#<procedure (substring s433 start434 . end435)> "ab" 0 0)  ==> ""
(#<procedure (substring s433 start434 . end435)> "ab" 1 1)  ==> ""
(#<procedure (substring s433 start434 . end435)> "ab" 2 2)  ==> ""
(#<procedure (substring s433 start434 . end435)> "ab" 0 1)  ==> "a"
(#<procedure (substring s433 start434 . end435)> "ab" 1 2)  ==> "b"
(#<procedure (substring s433 start434 . end435)> "ab" 0 2)  ==> "ab"
(#<procedure (string-append . all564)> "foo" "bar")  ==> "foobar"
(#<procedure (string-append . all564)> "foo")  ==> "foo"
(#<procedure (string-append . all564)> "foo" "")  ==> "foo"
(#<procedure (string-append . all564)> "" "foo")  ==> "foo"
(#<procedure (string-append . all564)>)  ==> ""
(#<procedure (make-string size368 . fill369)> 0)  ==> ""
(#<procedure (string=? x455 y456)> "" "")  ==> #t
(#<procedure (string<? s1469 s2470)> "" "")  ==> #f
(#<procedure (string>? s1481 s2482)> "" "")  ==> #f
(#<procedure (string<=? s1493 s2494)> "" "")  ==> #t
(#<procedure (string>=? s1498 s2499)> "" "")  ==> #t
(#<procedure (string-ci=? x458 y459)> "" "")  ==> #t
(#<procedure (string-ci<? s1516 s2517)> "" "")  ==> #f
(#<procedure (string-ci>? s1528 s2529)> "" "")  ==> #f
(#<procedure (string-ci<=? s1540 s2541)> "" "")  ==> #t
(#<procedure (string-ci>=? s1545 s2546)> "" "")  ==> #t
(#<procedure (string=? x455 y456)> "A" "B")  ==> #f
(#<procedure (string=? x455 y456)> "a" "b")  ==> #f
(#<procedure (string=? x455 y456)> "9" "0")  ==> #f
(#<procedure (string=? x455 y456)> "A" "A")  ==> #t
(#<procedure (string<? s1469 s2470)> "A" "B")  ==> #t
(#<procedure (string<? s1469 s2470)> "a" "b")  ==> #t
(#<procedure (string<? s1469 s2470)> "9" "0")  ==> #f
(#<procedure (string<? s1469 s2470)> "A" "A")  ==> #f
(#<procedure (string>? s1481 s2482)> "A" "B")  ==> #f
(#<procedure (string>? s1481 s2482)> "a" "b")  ==> #f
(#<procedure (string>? s1481 s2482)> "9" "0")  ==> #t
(#<procedure (string>? s1481 s2482)> "A" "A")  ==> #f
(#<procedure (string<=? s1493 s2494)> "A" "B")  ==> #t
(#<procedure (string<=? s1493 s2494)> "a" "b")  ==> #t
(#<procedure (string<=? s1493 s2494)> "9" "0")  ==> #f
(#<procedure (string<=? s1493 s2494)> "A" "A")  ==> #t
(#<procedure (string>=? s1498 s2499)> "A" "B")  ==> #f
(#<procedure (string>=? s1498 s2499)> "a" "b")  ==> #f
(#<procedure (string>=? s1498 s2499)> "9" "0")  ==> #t
(#<procedure (string>=? s1498 s2499)> "A" "A")  ==> #t
(#<procedure (string-ci=? x458 y459)> "A" "B")  ==> #f
(#<procedure (string-ci=? x458 y459)> "a" "B")  ==> #f
(#<procedure (string-ci=? x458 y459)> "A" "b")  ==> #f
(#<procedure (string-ci=? x458 y459)> "a" "b")  ==> #f
(#<procedure (string-ci=? x458 y459)> "9" "0")  ==> #f
(#<procedure (string-ci=? x458 y459)> "A" "A")  ==> #t
(#<procedure (string-ci=? x458 y459)> "A" "a")  ==> #t
(#<procedure (string-ci<? s1516 s2517)> "A" "B")  ==> #t
(#<procedure (string-ci<? s1516 s2517)> "a" "B")  ==> #t
(#<procedure (string-ci<? s1516 s2517)> "A" "b")  ==> #t
(#<procedure (string-ci<? s1516 s2517)> "a" "b")  ==> #t
(#<procedure (string-ci<? s1516 s2517)> "9" "0")  ==> #f
(#<procedure (string-ci<? s1516 s2517)> "A" "A")  ==> #f
(#<procedure (string-ci<? s1516 s2517)> "A" "a")  ==> #f
(#<procedure (string-ci>? s1528 s2529)> "A" "B")  ==> #f
(#<procedure (string-ci>? s1528 s2529)> "a" "B")  ==> #f
(#<procedure (string-ci>? s1528 s2529)> "A" "b")  ==> #f
(#<procedure (string-ci>? s1528 s2529)> "a" "b")  ==> #f
(#<procedure (string-ci>? s1528 s2529)> "9" "0")  ==> #t
(#<procedure (string-ci>? s1528 s2529)> "A" "A")  ==> #f
(#<procedure (string-ci>? s1528 s2529)> "A" "a")  ==> #f
(#<procedure (string-ci<=? s1540 s2541)> "A" "B")  ==> #t
(#<procedure (string-ci<=? s1540 s2541)> "a" "B")  ==> #t
(#<procedure (string-ci<=? s1540 s2541)> "A" "b")  ==> #t
(#<procedure (string-ci<=? s1540 s2541)> "a" "b")  ==> #t
(#<procedure (string-ci<=? s1540 s2541)> "9" "0")  ==> #f
(#<procedure (string-ci<=? s1540 s2541)> "A" "A")  ==> #t
(#<procedure (string-ci<=? s1540 s2541)> "A" "a")  ==> #t
(#<procedure (string-ci>=? s1545 s2546)> "A" "B")  ==> #f
(#<procedure (string-ci>=? s1545 s2546)> "a" "B")  ==> #f
(#<procedure (string-ci>=? s1545 s2546)> "A" "b")  ==> #f
(#<procedure (string-ci>=? s1545 s2546)> "a" "b")  ==> #f
(#<procedure (string-ci>=? s1545 s2546)> "9" "0")  ==> #t
(#<procedure (string-ci>=? s1545 s2546)> "A" "A")  ==> #t
(#<procedure (string-ci>=? s1545 s2546)> "A" "a")  ==> #t
SECTION(6 8)
(#<procedure (vector? x1387)> #(0 (2 2 2 2) "Anna"))  ==> #t
(#<procedure (vector . xs1422)> a b c)  ==> #(a b c)
(#<procedure (vector . xs1422)>)  ==> #()
(#<procedure (vector-length v1389)> #(0 (2 2 2 2) "Anna"))  ==> 3
(#<procedure (vector-length v1389)> #())  ==> 0
(#<procedure (f_9173 v1391 i1392)> #(1 1 2 3 5 8 13 21) 5)  ==> 8
(vector-set #(0 ("Sue" "Sue") "Anna"))  ==> #(0 ("Sue" "Sue") "Anna")
(#<procedure (##sys#make-vector size1398 . fill1399)> 2 hi)  ==> #(hi hi)
(#<procedure (##sys#make-vector size1398 . fill1399)> 0)  ==> #()
(#<procedure (##sys#make-vector size1398 . fill1399)> 0 a)  ==> #()
SECTION(6 9)
(#<procedure (procedure? x1603)> #<procedure (f_6381 x194)>)  ==> #t
(#<procedure (procedure? x1603)> #<procedure (? x)>)  ==> #t
(#<procedure (procedure? x1603)> (lambda (x) (* x x)))  ==> #f
(#<procedure (call-with-current-continuation proc1741)> #<procedure (procedure? x1603)>)  ==> #t
(#<procedure C_apply> #<procedure C_plus> (3 4))  ==> 7
(#<procedure C_apply> #<procedure (? a b)> (3 4))  ==> 7
(#<procedure C_apply> #<procedure C_plus> 10 (3 4))  ==> 17
(#<procedure C_apply> #<procedure (list . lst262)> ())  ==> ()
(#<procedure (? . args)> 12 75)  ==> 30
(#<procedure (map fn1691 lst11692 . lsts1693)> #<procedure (f_6393 x204)> ((a b) (d e) (g h)))  ==> (b e h)
(#<procedure (map fn1691 lst11692 . lsts1693)> #<procedure C_plus> (1 2 3) (4 5 6))  ==> (5 7 9)
(#<procedure (map fn1691 lst11692 . lsts1693)> #<procedure C_plus> (1 2 3))  ==> (1 2 3)
(#<procedure (map fn1691 lst11692 . lsts1693)> #<procedure C_times> (1 2 3))  ==> (1 2 3)
(#<procedure (map fn1691 lst11692 . lsts1693)> #<procedure C_minus> (1 2 3))  ==> (-1 -2 -3)
(for-each #(0 1 4 9 16))  ==> #(0 1 4 9 16)
(#<procedure (call-with-current-continuation proc1741)> #<procedure (? exit)>)  ==> -3
(#<procedure (list-length obj)> (1 2 3 4))  ==> 4
(#<procedure (list-length obj)> (a b . c))  ==> #f
(#<procedure (map fn1691 lst11692 . lsts1693)> #<procedure (f_6393 x204)> ())  ==> ()
SECTION(6 10 1)
(#<procedure (input-port? x1791)> #<input port "(stdin)">)  ==> #t
(#<procedure (output-port? x1800)> #<output port "(stdout)">)  ==> #t
(#<procedure (call-with-input-file name2028 p2029 . mode2030)> "r4rstest.scm" #<procedure (input-port? x1791)>)  ==> #t
(#<procedure (input-port? x1791)> #<input port "r4rstest.scm">)  ==> #t
SECTION(6 10 2)
(#<procedure (peek-char . tmp22452246)> #<input port "r4rstest.scm">)  ==> #\;
(#<procedure (read-char . tmp22062207)> #<input port "r4rstest.scm">)  ==> #\;
(#<procedure (read . tmp22602261)> #<input port "r4rstest.scm">)  ==> (define cur-section (quote ()))
(#<procedure (peek-char . tmp22452246)> #<input port "r4rstest.scm">)  ==> #\(
(#<procedure (read . tmp22602261)> #<input port "r4rstest.scm">)  ==> (define errs (quote ()))
SECTION(6 10 3)
(#<procedure (call-with-output-file name2036 p2037 . mode2038)> "tmp1" #<procedure (? test-file)>)  ==> #t
(#<procedure (read . tmp22602261)> #<input port "tmp1">)  ==> (define foo (quote (#t #f a () 9739 -3 . #((test) "te \" \" st" "" test #() b c))))
(#<procedure (eof-object? x2182)> #!eof)  ==> #t
(#<procedure (eof-object? x2182)> #!eof)  ==> #t
(input-port? #t)  ==> #t
(#<procedure (read-char . tmp22062207)> #<input port "tmp1">)  ==> #\;
(#<procedure (read-char . tmp22062207)> #<input port "tmp1">)  ==> #\;
(#<procedure (read-char . tmp22062207)> #<input port "tmp1">)  ==> #\;
(#<procedure (read . tmp22602261)> #<input port "tmp1">)  ==> (#t #f a () 9739 -3 . #((test) "te \" \" st" "" test #() b c))
(#<procedure (read . tmp22602261)> #<input port "tmp1">)  ==> (define foo (quote (#t #f a () 9739 -3 . #((test) "te \" \" st" "" test #() b c))))
(#<procedure (output-port? x1800)> #<output port "tmp2">)  ==> #t
(#<procedure (read . tmp22602261)> #<input port "tmp2">)  ==> (define foo (quote (#t #f a () 9739 -3 . #((test) "te \" \" st" "" test #() b c))))
(#<procedure (eof-object? x2182)> #!eof)  ==> #t
(#<procedure (eof-object? x2182)> #!eof)  ==> #t
(input-port? #t)  ==> #t
(#<procedure (read-char . tmp22062207)> #<input port "tmp2">)  ==> #\;
(#<procedure (read-char . tmp22062207)> #<input port "tmp2">)  ==> #\;
(#<procedure (read-char . tmp22062207)> #<input port "tmp2">)  ==> #\;
(#<procedure (read . tmp22602261)> #<input port "tmp2">)  ==> (#t #f a () 9739 -3 . #((test) "te \" \" st" "" test #() b c))
(#<procedure (read . tmp22602261)> #<input port "tmp2">)  ==> (define foo (quote (#t #f a () 9739 -3 . #((test) "te \" \" st" "" test #() b c))))

errors were:
(SECTION (got expected (call)))
((6 4) (#t #f (string->symbol #t)))
((6 4) (#f #t (#<procedure (eq? x180 y181)> mISSISSIppi mississippi)))
((6 4) (#f #t (standard-case #f)))
((6 4) ("Martin" "MARTIN" (#<procedure (symbol->string s1295)> Martin)))
((6 4) ("flying-fish" "FLYING-FISH" (#<procedure (symbol->string s1295)> flying-fish)))
((6 4) (#f #t (standard-case #f)))
((6 4) (#f #t (standard-case #f)))


;testing inexact numbers; 
SECTION(6 2)
(#<procedure (eqv? x183 y184)> 1 1.)  ==> #f
(#<procedure (eqv? x183 y184)> 0 0.)  ==> #f
SECTION(6 5 5)
(#<procedure (##sys#inexact? x1088)> 3.9)  ==> #t
(max #t)  ==> #t
(#<procedure (max n11170 . ns1171)> 3.9 4)  ==> 4.
(#<procedure C_exact_to_inexact> 4)  ==> 4.
(#<procedure C_exact_to_inexact> 4.)  ==> 4.
(#<procedure (##sys#inexact->exact n1129)> 4)  ==> 4
(#<procedure (##sys#inexact->exact n1129)> 4.)  ==> 4
(#<procedure (round x1140)> -4.5)  ==> -4.
(#<procedure (round x1140)> -3.5)  ==> -4.
(#<procedure (round x1140)> -3.9)  ==> -4.
(#<procedure (round x1140)> 0.)  ==> 0.
(#<procedure (round x1140)> 0.25)  ==> 0.
(#<procedure (round x1140)> 0.8)  ==> 1.
(#<procedure (round x1140)> 3.5)  ==> 4.
(#<procedure (round x1140)> 4.5)  ==> 4.
(#<procedure C_expt> 0 0)  ==> 1
(#<procedure C_expt> 0 1)  ==> 0
(#<procedure (atan n11193 . n21194)> 1 1)  ==> 0.785398163397448
(#<procedure (call-with-output-file name2036 p2037 . mode2038)> "tmp3" #<procedure (? test-file)>)  ==> #t
(#<procedure (read . tmp22602261)> #<input port "tmp3">)  ==> (define foo (quote (0.25 -3.25)))
(#<procedure (eof-object? x2182)> #!eof)  ==> #t
(#<procedure (eof-object? x2182)> #!eof)  ==> #t
(input-port? #t)  ==> #t
(#<procedure (read-char . tmp22062207)> #<input port "tmp3">)  ==> #\;
(#<procedure (read-char . tmp22062207)> #<input port "tmp3">)  ==> #\;
(#<procedure (read-char . tmp22062207)> #<input port "tmp3">)  ==> #\;
(#<procedure (read . tmp22602261)> #<input port "tmp3">)  ==> (0.25 -3.25)
(#<procedure (read . tmp22602261)> #<input port "tmp3">)  ==> (define foo (quote (0.25 -3.25)))
(pentium-fdiv-bug #t)  ==> #t

errors were:
(SECTION (got expected (call)))
((6 4) (#t #f (string->symbol #t)))
((6 4) (#f #t (#<procedure (eq? x180 y181)> mISSISSIppi mississippi)))
((6 4) (#f #t (standard-case #f)))
((6 4) ("Martin" "MARTIN" (#<procedure (symbol->string s1295)> Martin)))
((6 4) ("flying-fish" "FLYING-FISH" (#<procedure (symbol->string s1295)> flying-fish)))
((6 4) (#f #t (standard-case #f)))
((6 4) (#f #t (standard-case #f)))


To fully test continuations, Scheme 4, and DELAY/FORCE do:
(test-cont) (test-sc4) (test-delay)

;testing continuations; 
SECTION(6 9)
(#<procedure (leaf-eq? x y)> (a (b (c))) ((a) b c))  ==> #t
(#<procedure (leaf-eq? x y)> (a (b (c))) ((a) b c d))  ==> #f

errors were:
(SECTION (got expected (call)))
((6 4) (#t #f (string->symbol #t)))
((6 4) (#f #t (#<procedure (eq? x180 y181)> mISSISSIppi mississippi)))
((6 4) (#f #t (standard-case #f)))
((6 4) ("Martin" "MARTIN" (#<procedure (symbol->string s1295)> Martin)))
((6 4) ("flying-fish" "FLYING-FISH" (#<procedure (symbol->string s1295)> flying-fish)))
((6 4) (#f #t (standard-case #f)))
((6 4) (#f #t (standard-case #f)))


;testing scheme 4 functions; 
SECTION(6 7)
(#<procedure (##sys#string->list s380)> "P l")  ==> (#\P #\space #\l)
(#<procedure (##sys#string->list s380)> "")  ==> ()
(#<procedure (##sys#list->string lst0387)> (#\1 #\\ #\"))  ==> "1\\\""
(#<procedure (##sys#list->string lst0387)> ())  ==> ""
SECTION(6 8)
(#<procedure (vector->list v1415)> #(dah dah didah))  ==> (dah dah didah)
(#<procedure (vector->list v1415)> #())  ==> ()
(#<procedure (list->vector lst01405)> (dididit dah))  ==> #(dididit dah)
(#<procedure (list->vector lst01405)> ())  ==> #()
SECTION(6 10 4)
(load (#t #f a () 9739 -3 . #((test) "te \" \" st" "" test #() b c)))  ==> (#t #f a () 9739 -3 . #((test) "te \" \" st" "" test #() b c))

errors were:
(SECTION (got expected (call)))
((6 4) (#t #f (string->symbol #t)))
((6 4) (#f #t (#<procedure (eq? x180 y181)> mISSISSIppi mississippi)))
((6 4) (#f #t (standard-case #f)))
((6 4) ("Martin" "MARTIN" (#<procedure (symbol->string s1295)> Martin)))
((6 4) ("flying-fish" "FLYING-FISH" (#<procedure (symbol->string s1295)> flying-fish)))
((6 4) (#f #t (standard-case #f)))
((6 4) (#f #t (standard-case #f)))


;testing DELAY and FORCE; 
SECTION(6 9)
(delay 3)  ==> 3
(delay (3 3))  ==> (3 3)
(delay 2)  ==> 2
(#<procedure (##sys#force promise154)> #<promise>)  ==> 6
(#<procedure (##sys#force promise154)> #<promise>)  ==> 6
(force 3)  ==> 3

errors were:
(SECTION (got expected (call)))
((6 4) (#t #f (string->symbol #t)))
((6 4) (#f #t (#<procedure (eq? x180 y181)> mISSISSIppi mississippi)))
((6 4) (#f #t (standard-case #f)))
((6 4) ("Martin" "MARTIN" (#<procedure (symbol->string s1295)> Martin)))
((6 4) ("flying-fish" "FLYING-FISH" (#<procedure (symbol->string s1295)> flying-fish)))
((6 4) (#f #t (standard-case #f)))
((6 4) (#f #t (standard-case #f)))

